@page "/users/{listType}/{mode}/{slug?}/{gameListId:long?}"

@using community.Data
@inject GameListRequestService _gameListRequestService
@inject UserService _userService
@inject GameService _gameService
@inject IHttpContextAccessor _httpContextAccessor
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject GameListService GameListService

<PageTitle>Open Video Game Data - Create List</PageTitle>
<HeadContent>
    <meta name="description" content="‚ú® Contribute to our community!">
</HeadContent>

<div class="row">
    <div class="col-lg-9">
        @if (string.IsNullOrEmpty(finalGameListNameBySlug))
        {
            @if (IsRegularList())
            {
                <h1>Create your list!</h1>
            }
        }
        else 
        {
            @if (IsEdit()) {
               <h1>Edit your list for "@finalGameListNameBySlug"!</h1>
            } else {
                <h1>Create your list for "@finalGameListNameBySlug"!</h1>
            }
        }
    </div>
</div>

@if (IsEdit() && !editingYourList)
{
    <div>You can't edit this list</div>
}
else if (gameListRequest != null)
{
    <EditForm Model="@gameListRequest">
        <hr style="margin-bottom: 25px; margin-top: 25px;"/>
        <div class="row">
            <div class="col">
                <h2>Games to add (@gamesRequests.Count/@MaxGames)</h2>

                @if (gamesRequests is null) {
                    <div class="spinner-border" role="status"></div>
                } else {
                    <GameRequestsSelectedList @ref="gameListComponent" @bind-gamesRequests="gamesRequests" isTracker="true" />
                }
            </div>
            <div class="row">
                <div class="col">
                    <label>
                        Search and select a game
                        <div class="tooltipi">
                            (?)<span class="tooltipitext">'name' or 'name, year'</span>
                        </div>
                    </label>
                    <InputText disabled="@(gamesRequests.Count >= MaxGames)" class="form-control" id="formGameIdInput" @bind-Value="GameTitle" @onkeyup="@PressedKey"/>
                    <button disabled="@(searchingGame || gamesRequests.Count >= MaxGames)" class="btn btn-info" @onclick="async () => await Search()">
                        @if(searchingGame)
                        {
                            <div class="spinner-border" role="status"></div>
                        }
                        else
                        {
                            <div>üîç Search</div>
                        }
                    </button>
                </div>
            </div>
            <GameSelector @ref="gameSelectorComponent" OnGameSelectEvent="@((args) => SelectGame(args.Item1, args.Item2, args.Item3))"/>
        </div>
        @if (finalGameListIdBySlug == 0)
        {
            <div class="row">
                <div class="col">
                    <div class="mb-3">
                        @if (IsRegularList())
                        {
                            <label>Select a list</label>
                            <select class="form-select" @onchange="(arg) => SelectList(arg.Value)">
                                <option selected> - </option>
                                @foreach (var list in listsToSelect)
                                {
                                    <option value="@list.Value">@list.Value</option> 
                                }
                            </select>
                        }
                    </div>
                </div>
                <div class="col">
                    <div class="mb-3">
                        <label>Select a year</label>
                        <select class="form-select" disabled="@(yearSelectDisabled)" @bind="selectedListYear">
                            <option selected> - </option>
                            @if (listsYearToSelect != null)
                            {
                                @foreach (var year in listsYearToSelect)
                                {
                                <option value="@year.Value">@year.Value</option> 
                                }
                            }
                        </select>
                    </div>
                </div>
            </div>
        }
        <hr style="margin-bottom: 25px; margin-top: 25px; position: relative; z-index: -999;"/>
        @if (IsEdit()) {
            <button disabled="@(saving)" @onclick="async () => await EditGameList()" type="submit" class="btn btn-primary">Save</button>
        } else {
            <button disabled="@(saving)" @onclick="async () => await CreateGameList()" type="submit" class="btn btn-primary">Create list</button>
        }
        <div style="margin-bottom: 200px;"></div>  
    </EditForm>
}

    <style>
        .source-tag {
            display: inline-block;
            margin-left: 0.1em;
            margin-right: 0.2em;
            padding: 0.0em;
        }
    </style>

@code 
{
    [Parameter]
    public string slug { get; set; }
    [Parameter]
    public string mode { get; set; }
    [Parameter]
    public long? gameListId { get; set; }
    [Parameter]
    public string listType {get; set; }

    private long finalGameListIdBySlug = 0;
    private string finalGameListNameBySlug = "";
    public GameListRequest? gameListRequest;
    public string GameTitle { get; set; }
    public bool yearSelectDisabled { get; set; } = true;
    public string selectedListTitle { get; set; }
    public int selectedListYear { get; set; }
    public bool saving { get; set; } = false;
    public bool searchingGame { get; set; } = false;
    public User? User { get; set; }
    public List<GameRequest> gamesRequests = new List<GameRequest>();
    private bool listIsValid = false;
    private bool preventExclusion = false;
    private string validateSourceUrlMessage = "";
    private string sourceListUrl = "";
    private int MaxGames = 15;
    GameSelector? gameSelectorComponent;
    GameRequestsSelectedList? gameListComponent;
    private FinalGameList finalGameList = new FinalGameList();
    private List<GroupItem>? groupItems;
    private List<SourceList>? sourceLists;
    public List<KeyValuePair<long, string>> listsToSelect;
    public List<KeyValuePair<long, int?>> listsYearToSelect;
    int currentIndex;
    bool editingYourList = true;

    protected override async Task OnInitializedAsync()
    {
        RedirectToLoginIfNotLogged();
        
        this.gameListRequest = new GameListRequest();
        listsToSelect = _gameListRequestService.GetAllGameListForSelectField();
        User = _userService.GetLoggedUser();

        if (IsEdit() && gameListId is not null && User is not null) {
            var gameList = await _gameListRequestService.GetUserGameListById(gameListId.Value);
            var canEdit = UserCanEditList(gameList?.UserContributedId);
            if (canEdit)
            {
                this.sourceListUrl = gameList.SourceListUrl;

                foreach (var item in gameList.Items) {
                    this.gamesRequests.Add(new GameRequest() {
                        GameTitle = item.GameTitle,
                        FirstReleaseDate = item.Game.FirstReleaseDate.Year.ToString(),
                        GameId = item.GameId
                    });
                }

                await gameListComponent.SetGamesPositions();
            }
            else
            {
                editingYourList = false;
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(slug))
        {
            var (finalListId, finalListName) = GameListService.GetGameListIdAndNameFromSlug(this.slug);
            finalGameListIdBySlug = finalListId.HasValue ? finalListId.Value : 0;
            finalGameListNameBySlug = finalListName;
        }
    }

    private bool IsRegularList()
    {
        return listType == "lists";
    }

    private bool IsEdit() {
        return this.mode == "edit";
    }

    private void SelectList(object listTitleObject)
    {
        var listTitle = listTitleObject as string;
        this.selectedListTitle = listTitle;
        listsYearToSelect = _gameListRequestService.GetAllGameListYearForSelectField(listTitle);
        if (listsYearToSelect.All(x => x.Value == null))
        {
            yearSelectDisabled = true;
            selectedListYear = 0;
        }
        else
            yearSelectDisabled = false;
    }

    private async Task AtualizarTexto(ChangeEventArgs args)
    {
        sourceListUrl = args.Value.ToString();
        await this.ValidateSourceUrl();
    }

    private async Task PressedKey(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            preventExclusion = true;
            await Search();
        }
    }

    private async Task Search()
    {
        searchingGame = true;
        await gameSelectorComponent.Search(this.GameTitle);
        searchingGame = false;
    }

    private void SelectGame(string gameName, string firstReleaseDate, long internalGameId)
    {
        this.GameTitle = "";

        this.gamesRequests.Add(new GameRequest() {
            GameTitle = gameName,
            FirstReleaseDate = firstReleaseDate,
            GameId = internalGameId
        });
    }

    private async Task CreateGameList() 
    {
        saving = true;
        RedirectToLoginIfNotLogged();

        try
        {
            var finalListId = finalGameListIdBySlug;
            if (finalListId == 0)
                finalListId = await _gameListRequestService.GetGameListIdFromTitleAndYear(this.selectedListTitle, this.selectedListYear);

            var gameListRequest = new GameListRequest() {
                SourceListUrl = this.sourceListUrl,
                FinalGameListId = finalListId,
                DateAdded = DateTime.UtcNow,
                Hidden = false,
                UserPostedId = this.User.Id
            };

            await gameListComponent.SetGamesPositions();
            gameListRequest.GameRequests = gamesRequests;

            var response = await _gameListRequestService.CreateListForUser(gameListRequest);
            
            if (response.Success)
            {
                await _userService.GiveBadge(4, User.Id);
                NavigationManager.NavigateTo($"/users/{User.Nickname}/lists");
            }
            else
                await JS.InvokeVoidAsync("alert", response.Reason);
        }
        catch (Exception ex) { 
            Console.WriteLine("Create - ", ex.Message);
        }
        
        saving = false;
    }

    private async Task EditGameList() 
    {
        saving = true;
        RedirectToLoginIfNotLogged();

        if (editingYourList)
        {
            try
            {
                var finalListId = finalGameListIdBySlug;
                if (finalListId == 0)
                    finalListId = await _gameListRequestService.GetGameListIdFromTitleAndYear(this.selectedListTitle, this.selectedListYear);

                var gameListRequest = new GameListRequest() {
                    SourceListUrl = this.sourceListUrl,
                    FinalGameListId = finalListId,
                    DateAdded = DateTime.UtcNow,
                    Hidden = false
                };

                await gameListComponent.SetGamesPositions();
                gameListRequest.GameRequests = gamesRequests;

                var response = await _gameListRequestService.EditGameListForUser(this.gameListId.Value, gameListRequest);
                
                if (response.Success)
                    await JS.InvokeVoidAsync("history.back");
                else
                    await JS.InvokeVoidAsync("alert", response.Reason);
            }
            catch (Exception ex) { 
                Console.WriteLine($"[ERRO] - EditGameList - {ex.Message}", ex);
            }
        }
        
        saving = false;
    }

    private async Task ValidateSourceUrl() {
        if (!string.IsNullOrEmpty(this.sourceListUrl)) {
            var response = await _gameListRequestService.ValidateSourceUrl(this.sourceListUrl);
            this.validateSourceUrlMessage = response.Reason;
            this.listIsValid = response.Success;
        } else {
            this.validateSourceUrlMessage = "Enter a list to continue";
            this.listIsValid = false;
        }
    }

    private bool UserCanEditList(long? listCreatorId)
    {
        return listCreatorId == User?.Id || User?.Role == "admin";;
    }

    private void RedirectToLoginIfNotLogged()
    {
        if (!_userService.IsLogged())
            NavigationManager.NavigateTo($"/Identity/Login?returnUrl={NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}", true);
    }
}