@page "/users/{nickname}/lists"
@inject NavigationManager NavigationManager
@inject ApplicationDbContext _context
@using Microsoft.EntityFrameworkCore
@using community.Utils
@inject UserService _userService
@inject IStringLocalizer<List> Loc

@if (userPage != null)
{
    <PageTitle>Open Video Game Data - @userPage.FullName</PageTitle>
    <HeadContent>
        <meta name="description" content="@Loc["UserListsSubtitle"] @userPage.FullName">
    </HeadContent>
}

@if (userLogged is not null) {
    @if (YourLists()) {
        <h1>@Loc["UserListsTitle"] </h1>
        <p>@Loc["UserListsSubtitle2"]</p>
    } else {
        <h1>@userPage?.FullName @Loc["gamelists"]</h1>
        <p>@Loc["UserListsSubtitle"] @userPage?.FullName</p>
    }
    <hr style="margin-bottom: 10px; margin-top: 25px; position: relative; z-index: -999;"/>
}

@if (gameLists.Any()) {
    <h2 class="mb-0 mt-3">@Loc["TopLists"]</h2>
    <GameLists GameList="@gameLists" IsUserList="true" ></GameLists>
    <Paginator pager="@pager" OnPageClickEvent="@((args)=> GetAllUserLists(args.Item1))"/>
} else {
    if (YourLists()) {
        <p>@Loc["NoListsYou"]</p>
    } else if (!trackerGameLists.Any()) {
        <p>@Loc["NoListsThey"]</p>
    }
}
@if (YourLists()) {
    <button type="button" style="margin-bottom: 15px;" class="btn btn-primary" @onclick="() => AddNewList()"><span class="oi oi-plus" aria-hidden="true"></span> @Loc["AddNewList"]</button>
}

<style>
    .game-card-title {
        max-width: 180px; 
        margin: 0; 
        padding: 0; 
        text-align: center; 
        font-weight: bold;
    }

    .sub-titles {
        font-size: 0.5em;
    }
</style>

@code {
    [Parameter]
    public string nickname { get; set; }
    public List<GameList> gameLists = new List<GameList>();
    public List<GameList> trackerGameLists = new List<GameList>();
    private Pager pager;
    public User? userLogged = null;
    public User? userPage = null;

    protected override async Task OnParametersSetAsync() {
        this.userLogged = _userService.GetLoggedUser();
        this.userPage = _userService.GetByNickname(nickname);
        if (userPage != null)
            await GetAllUserLists();
    }

    private bool YourLists() {
        try
        {
            return userLogged?.Id == userPage?.Id;
        }
        catch(Exception e)
        {
            return false;
        }
    }

    private async Task GetAllUserLists(int currentPage = 1, int pageSize = 9, int maxPages = 5)
    {
        try
        {
            var totalItems = _context.GameLists.Where(gameList => gameList.ByUser 
                                                     && gameList.UserContributedId == userPage.Id).Count();
                                                     
            if (totalItems >= 10)
                await _userService.GiveBadge(5, userPage.Id);

            var newPager = new Pager(totalItems, currentPage, pageSize, maxPages);

            if (totalItems <= 0) {
                (gameLists, pager) = (new List<GameList>(), newPager);
                return;
            }

            var gameListsFetched = _context.GameLists.Include(gameList => gameList.FinalGameList)
                                            .Include(gameList => gameList.UserContributed)
                                            .Include(gameList => gameList.Items)
                                            .ThenInclude(item => item.Game)
                                            .Include(gameList => gameList.Source)
                                            .Where(gameList => gameList.ByUser 
                                             && gameList.UserContributedId == userPage.Id)
                                            .Skip((newPager.CurrentPage - 1) * newPager.PageSize)
                                            .Take(newPager.PageSize)
                                            .ToList();

            (gameLists, pager) =  (gameListsFetched ?? new List<GameList>(), newPager);
        }
        catch(Exception e)
        {
            Console.WriteLine($"[ERRO] - GetAllUserLists - {e}");
            (gameLists, pager) =  (new List<GameList>(), pager);
        }
    }

    private void AddNewList(bool tracker = false) {
        NavigationManager.NavigateTo($"/users/{(tracker ? "trackers" : "lists")}/new");
    }
}