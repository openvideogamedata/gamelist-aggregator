@page "/new-list/{slug}"
@using community.Data
@inject GameListRequestService _gameListRequestService
@inject UserService _userService
@inject GameService _gameService
@inject IHttpContextAccessor _httpContextAccessor
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject GameListService GameListService

<PageTitle>Open Video Game Data - Create List</PageTitle>
<HeadContent>
    <meta name="description" content="‚ú® Contribute to our community!">
</HeadContent>

<div class="row">
    <div class="col-lg-9">
        <h1>Add new list for "@finalGameList.GetFullName()"</h1>
        
        <p>‚ú® This new list is <b>not</b> meant to reflect your personal opinion.</p>
        @if (!listIsValid) {
            <h2>Rules</h2>
            <ul>
                <li>Accurately transcribe the games from the original source.</li>
                <li>Must be enumerated and ranked.</li>
                <li>Should not change daily and not be based in another list</li>
            </ul>

            <p>Example list: <a target="_blank" href="https://www.ign.com/articles/the-best-100-video-games-of-all-time">https://www.ign.com/articles/the-best-100-video-games-of-all-time</a></p>
        }
    </div>
</div>
 
<div class="row">
    <div class="col">

    </div>
</div>
@if (gameListRequest != null)
{
    <EditForm Model="@gameListRequest">
        <div class="row">
            <div class="col">
                <div class="mb-6">
                    <label><b>Enter the URL of the list you want to add</b></label>
                    <InputText class="form-control" disabled="@listIsValid" @bind-Value="sourceListUrl" @oninput="AtualizarTexto"/>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col">
                @if (!string.IsNullOrEmpty(validateSourceUrlMessage)) {
                    @if (listIsValid) {
                        <div class="alert alert-success mt-2" role="alert">
                            ‚úîÔ∏è @validateSourceUrlMessage
                        </div>
                    } else {
                        <div class="alert alert-warning mt-2" role="alert">
                            ‚ö†Ô∏è @validateSourceUrlMessage
                        </div>
                    }
                }
            </div>
        </div>
        <hr style="margin-bottom: 25px; margin-top: 25px;"/>
        @if (listIsValid) {
            <div class="row">
                <div class="col">
                    <h2>Games to add (@gamesRequests.Count/@MaxGames)</h2>
                    <small>
                        For lists with more than @MaxGames, add only the top @MaxGames games;
                        otherwise, add all items of the list.
                        <div class="tooltipi">
                            (?)<span class="tooltipitext">if the list has only 10 items, you should add 10, if the list has 20, add at least 15</span>
                        </div>
                    </small>
                    <GameRequestsSelectedList @ref="gameListComponent" @bind-gamesRequests="gamesRequests" />
                </div>
                <div class="row">
                    <div class="col">
                        <label>
                            Search and select a game
                            <div class="tooltipi">
                                (?)<span class="tooltipitext">'name' or 'name, year'</span>
                            </div>
                        </label>
                        <InputText disabled="@(gamesRequests.Count >= MaxGames)" class="form-control" id="formGameIdInput" @bind-Value="GameTitle" @onkeydown="@PressedKey"/>
                        <button disabled="@(searchingGame || gamesRequests.Count >= MaxGames)" class="btn btn-info" @onclick="async () => await Search()">
                            @if(searchingGame)
                            {
                                <div class="spinner-border" role="status"></div>
                            }
                            else
                            {
                                <div>üîç Search</div>
                            }
                        </button>
                    </div>
                </div>
                <GameSelector @ref="gameSelectorComponent" OnGameSelectEvent="@((args) => SelectGame(args.Item1, args.Item2, args.Item3))"/>
            </div>
            <hr style="margin-bottom: 25px; margin-top: 25px; position: relative; z-index: -999;"/>
            <button disabled="@(saving)" @onclick="async () => await SubmitItem()" type="submit" class="btn btn-primary">Create new list suggestion</button>
            <div style="margin-bottom: 200px;"></div>
        }    
    </EditForm>
}

    <style>
        .source-tag {
            display: inline-block;
            margin-left: 0.1em;
            margin-right: 0.2em;
            padding: 0.0em;
        }
    </style>

@code 
{
    [Parameter]
    public string slug { get; set; }

    public GameListRequest? gameListRequest;
    public string GameTitle { get; set; }
    public bool saving { get; set; } = false;
    public bool searchingGame { get; set; } = false;
    public User? User { get; set; }
    public List<GameRequest> gamesRequests = new List<GameRequest>();
    private bool listIsValid = false;
    private bool preventExclusion = false;
    private string validateSourceUrlMessage = "";
    private string sourceListUrl = "";
    private int MaxGames = 15;
    GameSelector? gameSelectorComponent;
    GameRequestsSelectedList? gameListComponent;
    private FinalGameList finalGameList = new FinalGameList();

    protected override void OnInitialized()
    {
        RedirectToLoginIfNotLogged();
        
        this.gameListRequest = new GameListRequest();
        User = _userService.GetLoggedUser();

        (_, _, _, finalGameList, _) = GameListService.GetBySlug(this.slug, userId: User?.Id ?? 0);
    }

    private async Task AtualizarTexto(ChangeEventArgs args)
    {
        sourceListUrl = args.Value.ToString();
        await this.ValidateSourceUrl();
    }

    private async Task PressedKey(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            preventExclusion = true;
            await Search();
        }
    }

    private async Task Search()
    {
        searchingGame = true;
        await gameSelectorComponent.Search(this.GameTitle);
        searchingGame = false;
    }

    private void SelectGame(string gameName, string firstReleaseDate, long internalGameId)
    {
        this.GameTitle = "";

        this.gamesRequests.Add(new GameRequest() {
            GameTitle = gameName,
            FirstReleaseDate = firstReleaseDate,
            GameId = internalGameId
        });
    }

    private async Task SubmitItem() 
    {
        saving = true;
        RedirectToLoginIfNotLogged();

        try
        {
            var gameListRequest = new GameListRequest() {
                SourceListUrl = sourceListUrl,
                FinalGameListId = this.finalGameList.Id,
                DateAdded = DateTime.UtcNow,
                Hidden = false,
                UserPostedId = User.Id
            };

            await gameListComponent.SetGamesPositions();
            gameListRequest.GameRequests = gamesRequests;

            var response = await _gameListRequestService.Create(gameListRequest);
            
            if (response.Success)
                NavigationManager.NavigateTo("/list-suggestions");
            else
                await JS.InvokeVoidAsync("alert", response.Reason);
        }
        catch (Exception ex) { 
            Console.WriteLine("[ERRO] - Create - ", ex.Message);
        }
        
        saving = false;
    }

    private async Task ValidateSourceUrl() {
        if (!string.IsNullOrEmpty(this.sourceListUrl)) {
            var response = await _gameListRequestService.ValidateSourceUrl(this.sourceListUrl);
            this.validateSourceUrlMessage = response.Reason;
            this.listIsValid = response.Success;
        } else {
            this.validateSourceUrlMessage = "Enter a list to continue";
            this.listIsValid = false;
        }
    }

    private void RedirectToLoginIfNotLogged()
    {
        if (!_userService.IsLogged())
            NavigationManager.NavigateTo($"/Identity/Login?returnUrl={NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}", true);
    }
}