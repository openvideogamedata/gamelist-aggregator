@page "/users/fill"
@inject UserService _userService
@inject NavigationManager NavigationManager


@if (user == null)
{
    <p><em>User not found</em></p>
}
else
{
    @if (!alreadyFilled)
    {
        <h1>How about a better nickname?</h1>
    }
    
    @if (!loading)
    {
        <div>
            <div class="row">
                <div class="col">
                    <div class="mb-3">
                        <h1>
                            <div style="margin-bottom: 15px;">
                                <PixelEditor openEditing="@true" canEdit="@true" size="2" matrix="@userPicture" matrixChanged="async (x) => await UserPixelArtChanged(x)" userNickname="@user.FullName"/>
                            </div>
                        </h1>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col">
                    <div class="mb-1">
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <InputText class="form-control" Value="@nicknameSet" ValueChanged="CheckNickname" ValueExpression="() => nicknameSet" ></InputText>
                                @if (nicknameSet != user.FullName && !saving)
                                {
                                    @if (nicknameAvailable)
                                    {
                                        <div class="text-success">
                                            <small>Nickname available</small>
                                        </div>
                                    }
                                    else
                                    {
                                        @if (nicknameSet.Contains(' '))
                                        {
                                            <div class="text-danger">
                                                <small>No spaces allowed</small>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="text-danger">
                                                <small>Nickname being used</small>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                            <div class="col-md-4 mb-3">
                                <button disabled="@(saving || nicknameSet == user.FullName || !nicknameAvailable)" @onclick="async () => UpdateNickname()" class="btn btn-primary">Update</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
}

@code {
    private User user;
    private bool nicknameAvailable = false;
    private bool saving = false;
    private string[]? userPicture;
    private bool loading = true;
    private string nickname;
    private string nicknameSet;
    private bool alreadyFilled = false;
    
    protected override void OnParametersSet()
    {
        user = _userService.GetLoggedUser();
        if (user != null)
        {
            nickname = user.Nickname;
            nicknameSet = user.FullName;

            if (!user.NicknameIsNameIdentifier())
                alreadyFilled = true;
            
            if (!alreadyFilled)
                userPicture = user.GetUserPicture();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            if (alreadyFilled)
                NavigationManager.NavigateTo($"/users/{nickname}",false);
            else
            {
                loading = false;
                StateHasChanged();
            }
    }

    private async Task CheckNickname(string nicknameValue)
    {
        if (nicknameValue != user.FullName)
        {
            saving = true;
            nicknameSet = nicknameValue;
            nicknameAvailable = await _userService.NicknameIsAvailable(nicknameValue);
            saving = false;
        }
    }

    private async Task UpdateNickname()
    {
        saving = true;
        await _userService.UpdateNickname(nicknameSet, user);
        nickname = nicknameSet;
        NavigationManager.NavigateTo($"/",true);
        saving = false;
    }

    private async Task UserPixelArtChanged(string[] newMatrix)
    {
        saving = true;
        userPicture = newMatrix;
        await _userService.UpdatePixelArt(newMatrix, user);
        saving = false;
    }
}

