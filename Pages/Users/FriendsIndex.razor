@page "/users/friends"
@inject UserService _userService
@inject NavigationManager NavigationManager

@if (isLoggedUser)
{
    <h1>Friends</h1>
    <ul class="nav nav-tabs mb-2">
        <li style="cursor: pointer;" class="nav-item">
            <a class="nav-link prevent-select @(showFriends ? "active" : "")" @onclick="async () => await onClickTab(friends: true)"><i class="oi oi-people"></i> Friends</a>
        </li>
        <li style="cursor: pointer;" class="nav-item">
            <a class="nav-link prevent-select @(showRequests ? "active" : "")" @onclick="async () => await onClickTab(requests: true)"><i class="oi oi-plus"></i> Requests</a>
        </li>
    </ul>

    @if(showRequests)
    {
        <input class="form-check-input" type="radio" name="flexRadioDefault1" id="flexRadioDefault1" value="0" checked="@showReceivedRequest" @onchange="async (args) => await OnChangeRadio(args)">
        <div style="display: inline-block; margin-left: 3px;">Received</div>
        <input style="margin-left: 15px;" class="form-check-input" type="radio" name="flexRadioDefault2" id="flexRadioDefault2" value="1" checked="@(!showReceivedRequest)" @onchange="async (args) => await OnChangeRadio(args)">
        <div style="display: inline-block; margin-left: 3px;">Sent</div>

        <table class="table" style="width: 100%;">
            <tbody>
                @if (!loading)
                {
                    @foreach (var request in Requests)
                    {
                        <tr style="border-style: none !important;">
                            <td style="border-bottom-width: 0px !important;" width="10px"><PixelEditor canEdit="@false" size="1" matrix="@request.Requester.GetUserPicture()" showLoading="true" userNickname="@request.Requester.FullName"/></td>
                            <td style="border-bottom-width: 0px !important;">
                                <a href="/users/@request.Requester.Nickname">@request.Requester.FullName</a>
                            </td>
                            <td style="border-bottom-width: 0px !important;">
                                @if (showReceivedRequest)
                                {
                                    <button @onclick="async () => await AcceptFriend(request.FriendshipId)" class="btn btn-primary"><i class="oi oi-plus"></i> Accept</button>
                                    <button @onclick="async () => await RemoveFriendRequestReceived(request.FriendshipId)" class="btn btn-danger"><i class="oi oi-trash"></i></button>
                                }
                                else
                                {
                                    <button @onclick="async () => await RemoveFriendRequestSent(request.FriendshipId)" class="btn btn-danger"><i class="oi oi-trash"></i> Cancel</button>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
    @if(showFriends)
    {
        <table class="table" style="width: 100%;">
            <tbody>
                @foreach (var friendship in Friends)
                {
                    
                    <tr style="border-style: none !important;">
                        <td style="border-bottom-width: 0px !important;" width="10px"><PixelEditor canEdit="@false" size="1" matrix="@friendship.Friend.GetUserPicture()" showLoading="true" userNickname="@friendship.Friend.FullName"/></td>
                        <td style="border-bottom-width: 0px !important;">
                            <a href="/users/@friendship.Friend.Nickname">@friendship.Friend.FullName</a>
                        </td>
                        <td style="border-bottom-width: 0px !important;">
                            <button @onclick="async () => await RemoveFriend(friendship.FriendshipId)" class="btn btn-danger"><i class="oi oi-minus"></i> Remove</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else
{
    <p>Log in to see your friends</p>
}

@code {
    [Parameter]
    public string nickname { get; set; }
    private User User;
    private IList<FriendRequest> Requests = new List<FriendRequest>();
    private IList<FriendRequest> RequestsReceived = new List<FriendRequest>();
    private IList<FriendRequest> RequestsSent = new List<FriendRequest>();
    private IList<FriendConfirmed> Friends = new List<FriendConfirmed>();
    private bool showReceivedRequest = true;
    private bool isLoggedUser = false;
    private bool showRequests = false;
    private bool showFriends = true;
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        User = _userService.GetLoggedUser();
        if (User == null)
            isLoggedUser = false;
        else
        {
            isLoggedUser = true;
            Requests = await _userService.GetFriendRequests(User.Id);
        }
    }

    private async Task ShowResults()
    {
        loading = true;
        if (showRequests)
        {
            if (showReceivedRequest && !RequestsReceived.Any() )
                RequestsReceived = await _userService.GetFriendRequests(User.Id);
            else if (!showReceivedRequest && !RequestsSent.Any())
                RequestsSent = await _userService.GetFriendRequestsSent(User.Id);

            if (showReceivedRequest)
                Requests = RequestsReceived;
            else
                Requests = RequestsSent;
        }
        else
            Requests = new List<FriendRequest>();

        if (showFriends)
        {
            Friends = await _userService.GetFriends(User.Id);
            if (Friends != null && Friends.Any())
                await _userService.GiveBadge(9, User.Id);
        }
        else
            Friends = new List<FriendConfirmed>();
        loading = false;
    }

    private async Task onClickTab(bool requests = false, bool friends = false)
    {
        showRequests = showFriends = false;

        showRequests = requests;
        showFriends = friends;
        await ShowResults();
    }

    private async Task AcceptFriend(long friendshipId)
    {
        await _userService.AcceptFriendRequest(friendshipId);
        await _userService.GiveBadge(9, User.Id);

        var friendship = RequestsReceived.FirstOrDefault(x => x.FriendshipId == friendshipId);
        if (friendship != null) {
            await _userService.SendNotification($"{User.FullName} accepted your friend request! 🤝", friendship.Requester.Id);
            await _userService.GiveBadge(9, friendship.Requester.Id);
        }

        RequestsReceived = RequestsReceived.Where(x => x.FriendshipId != friendshipId).ToList();
        Requests = Requests.Where(x => x.FriendshipId != friendshipId).ToList();
    }

    private async Task RemoveFriendRequestReceived(long friendshipId)
    {
        await _userService.RemoveFriendship(friendshipId);
        RequestsReceived = RequestsReceived.Where(x => x.FriendshipId != friendshipId).ToList();
        Requests = Requests.Where(x => x.FriendshipId != friendshipId).ToList();
    }

    private async Task RemoveFriendRequestSent(long friendshipId)
    {
        await _userService.RemoveFriendship(friendshipId);
        RequestsSent = RequestsSent.Where(x => x.FriendshipId != friendshipId).ToList();
        Requests = Requests.Where(x => x.FriendshipId != friendshipId).ToList();
    }

    private async Task RemoveFriend(long friendshipId)
    {
        await _userService.RemoveFriendship(friendshipId);
        Friends = Friends.Where(x => x.FriendshipId != friendshipId).ToList();
    }

    private async Task OnChangeRadio(ChangeEventArgs args)
    {
        showReceivedRequest = args.Value.ToString() == "0";
        await ShowResults();
    }
}