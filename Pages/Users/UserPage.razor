@page "/users/{nickname}"
@inject UserService _userService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IStringLocalizer<UserPage> Loc


@if (user == null)
{
    <p><em>@Loc["UserNotFound"]</em></p>
}
else
{
    <PageTitle>Open Video Game Data - @user.FullName</PageTitle>
    <HeadContent>
        <meta name="description" content="@Loc["Checkouthow"] @user.FullName @Loc["ishelpingOpenVideoGameData"]">
    </HeadContent>

    <div>
        <div class="row">
            <div class="col">
                <div class="mb-3">
                    <h1>
                        <div style="margin-bottom: 15px;">
                            <PixelEditor canEdit="@isLoggedUser" size="2" matrix="@userPicture" matrixChanged="async (x) => await UserPixelArtChanged(x)" userNickname="@user.FullName"/>
                        </div>
                        @user.FullName 
                    </h1>
                    <div style="display: inline-block;">
                        @if (!isLoggedUser && loadedFriendship)
                        {
                            @if (!alreadyFriend && !alreadyRequestedFriend)
                            {
                                <button @onclick="async () => await AddFriend()" class="btn btn-primary"><i class="oi oi-plus"></i> @Loc["AddFriend"]</button>
                            }
                            @if (alreadyFriend)
                            {
                                <small>(@Loc["friend"])</small>
                            }
                            @if (alreadyRequestedFriend)
                            {
                                <small>(@Loc["friendrequestpending"])</small>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (isLoggedUser)
        {
            <div class="row">
                <div class="col">
                    <div class="mb-1">
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <InputText class="form-control" Value="@nicknameSet" ValueChanged="CheckNickname" ValueExpression="() => nicknameSet" ></InputText>
                                @if (nicknameSet != nickname && !saving)
                                {
                                    @if (nicknameAvailable)
                                    {
                                        <div class="text-success">
                                            <small>@Loc["Nicknameavailable"]</small>
                                        </div>
                                    }
                                    else
                                    {
                                        @if (nicknameSet.Contains(' '))
                                        {
                                            <div class="text-danger">
                                                <small>@Loc["Nospacesallowed"]</small>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="text-danger">
                                                <small>@Loc["Nicknamebeingused"]</small>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                            <div class="col-md-4 mb-3">
                                <button disabled="@(saving || nicknameSet == nickname || !nicknameAvailable)" @onclick="async () => await UpdateNickname()" class="btn btn-primary">@Loc["Update"]</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <a href="users/notifications">
                @Loc["Notifications"]
                @if(hasNotifications)
                {
                    <span style="color: red;" class="oi oi-media-record" aria-hidden="true"></span> 
                }
            </a>
            <a style="margin-left: 5px;" href="users/friends">
                @Loc["Friends"]
            </a>
        }
        <a style="margin-left: 5px;" href="/users/@nickname/lists">
            @Loc["List"]s
        </a>
        <a style="margin-left: 5px;" href="/users/@nickname/trackers">
            Trackers
        </a>
        <hr/>
        <div class="row">
            <div class="col-sm-2">
                <div class="card">
                    <div class="card-body" style="cursor: pointer;" @onclick="() => GoToRankingPage()">
                        <h5 class="card-title">@Loc["Globalrank"]</h5>
                        @if(gamificationValues == null)
                        {
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        else
                        {
                            @if (gamificationValues.Rank == 0)
                            {
                                <p class="card-text"> - </p>
                            }
                            else if (gamificationValues.Rank == 1)
                            {
                                <p class="card-text">@gamificationValues.Rank ðŸ¥‡</p>
                            }
                            else if (gamificationValues.Rank == 2)
                            {
                                <p class="card-text">@gamificationValues.Rank ðŸ¥ˆ</p>
                            }
                            else if (gamificationValues.Rank == 3)
                            {
                                <p class="card-text">@gamificationValues.Rank ðŸ¥‰</p>
                            }
                            else
                            {
                                <p class="card-text">@gamificationValues.Rank</p>
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="col-sm-2">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@Loc["Contributions"]</h5>
                        @if(gamificationValues == null)
                        {
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        else
                        {
                            <p class="card-text">@gamificationValues.Contributions</p>
                        }
                    </div>
                </div>
            </div>
            <div class="col-sm-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Top @Loc["List"]</h5>
                        @if(gamificationValues == null)
                        {
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        else
                        {
                            @if (string.IsNullOrEmpty(gamificationValues.TopList))
                            {
                                <small> - </small>
                            }
                            else
                            {
                                <small><a href="/list/@gamificationValues.TopListSlug">@gamificationValues.TopList</a></small>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        @if (gamificationValues != null && gamificationValues.Badges != null && gamificationValues.Badges.Any())
        {
            <a class="only-show-mobile" href="/badges">@Loc["all"] badges</a>
            <div class="flex-container" style="margin-top: 1em;">
            @foreach (var badge in gamificationValues.Badges)
            {
                <div style="margin-right: 5px; margin-top: 10px;">
                    <div class="tooltipi" style="font-size: 14px; margin-left: 5px;">
                        <a class="only-show-desktop" href="/badges">
                            <PixelEditor canEdit="@false" size="1" matrix="@badge.GetPixelArt()" showLoading="@false"/>
                        </a>
                        <div class="only-show-mobile">
                            <PixelEditor canEdit="@false" size="1" matrix="@badge.GetPixelArt()" showLoading="@false"/>
                        </div>
                        <span class="tooltipitext">@badge.Name: @badge.Description</span>
                    </div>
                </div>
            }
            </div>
        }
        <br/>
        <Trackers user="@user" trackStatus="2" onlyShowFilteredStatus="@true" />
    </div>
    @if (isLoggedUser)
    {
        <div class="delete-account">
            <a @onclick="async () => await DeleteAccountPopup()" style="cursor: pointer;">delete account</a>
        </div>
    }
}

<style>
    .card {
        --bs-card-bg: #1a1a1a !important;
    }
    .card-title, .card-text {
        color: #eeeeee !important;
    }
    .delete-account {
        height: 150px;
        position: absolute;
        bottom: 10px;
    }
</style>

@code {
    private User user;
    private User visitor;
    private bool isLoggedUser = false;
    private bool nicknameAvailable = false;
    private bool hasNotifications = false;
    private bool saving = false;
    private string nicknameSet;
    private GamificationValues? gamificationValues;
    private string[]? userPicture;
    private bool loadedFriendship = false;
    private bool alreadyFriend = true;
    private bool alreadyRequestedFriend = false;
    private bool loading = false;

    [Parameter]
    public string nickname { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        nicknameSet = nickname;
        user = _userService.GetByNickname(nickname);
        if (user != null)
        {
            userPicture = user.GetUserPicture();
            isLoggedUser = _userService.GetLoggedUserNameIdentifier() == user.NameIdentifier;
            hasNotifications = _userService.LoggedUserHasAnyNotifications();
            gamificationValues = await _userService.GetGamificationValues(user);

            if (!isLoggedUser)
            {
                visitor = _userService.GetLoggedUser();
                if (visitor != null)
                {
                    alreadyFriend = await _userService.AreFriends(visitor.Id, user.Id);
                    alreadyRequestedFriend = await _userService.HavePendingFriendship(visitor.Id, user.Id);
                    loadedFriendship = true;
                }
            }
        } 
    }

    private async Task CheckNickname(string nicknameValue)
    {
        saving = true;
        nicknameSet = nicknameValue;
        nicknameAvailable = await _userService.NicknameIsAvailable(nicknameValue);
        saving = false;
    }

    private async Task UpdateNickname()
    {
        saving = true;
        await _userService.UpdateNickname(nicknameSet, user);
        nickname = nicknameSet;
        NavigationManager.NavigateTo($"/users/{nickname}",true);
        saving = false;
    }

    private async Task UserPixelArtChanged(string[] newMatrix)
    {
        saving = true;
        userPicture = newMatrix;
        await _userService.UpdatePixelArt(newMatrix, user);
        saving = false;
    }

    private async Task AddFriend()
    {
        await _userService.AddFriend(visitor.Id, user.Id);
        await _userService.SendNotification($"{visitor.FullName} sent you a friend request. ðŸ‘‹", user.Id);
        alreadyRequestedFriend = true;
    }

    private void GoToRankingPage()
    {
        NavigationManager.NavigateTo($"/top-contributors");
    }

    private async Task DeleteAccountPopup()
    {
        var response = await JS.InvokeAsync<bool>("confirm", "All friends conections, personal lists, badges and trackers will be PERMANENTLY deleted. Are you sure?\n\n If you login again a new account will be created.");
        if (response)
        {
            await _userService.DeleteAccount(user.Id);
            NavigationManager.NavigateTo("/Identity/Logout?", true);
        }
    }
}