@page "/users/{nickname}/trackers"
@inject GameListRequestService _gameListRequestService
@inject GameListService _gameListService
@inject UserService _userService
@inject NavigationManager _navigationManager
@inject IJSRuntime JS
@inject IStringLocalizer<UserTrackers> Loc



@if (user != null)
{
    <PageTitle>@user.FullName's Trackers</PageTitle>
    <HeadContent>
        <meta name="description" content="Check how many games this user has tracked!">
    </HeadContent>

    <h1>@(user.FullName[user.FullName.Length-1] != 's' ? $"{user.FullName}'s trackers" : $"{user.FullName}' trackers")</h1>
    @if (alreadyFriend)
    {
        <ul style="margin-top: 0.5em;" class="nav nav-tabs mb-2">
            <li style="cursor: pointer;" class="nav-item">
                <a class="nav-link prevent-select @(showTrackers ? "active" : "")" @onclick="() => onClickTab(showTrackers: true)"><i class="oi oi-check"></i> Trackers</a>
            </li>
            <li style="cursor: pointer;" class="nav-item">
                <a class="nav-link prevent-select @(compareLists ? "active" : "")" @onclick="() => onClickTab(compareLists: true)"><i class="oi oi-fullscreen-exit"></i> Compare</a>
            </li>
        </ul>
    }

    @if(showTrackers)
    {
        <Trackers user="@user" trackStatus="@trackStatus" />
    }
    @if(compareLists)
    {
        <div class="col">
            <div class="mb-3">
                <label>@Loc["SelectAList"]</label>
                <select class="form-select" @onchange="async (arg) => await SelectList(arg.Value)">
                    <option selected> - </option>
                    @foreach (var list in listsToSelect)
                    {
                        <option value="@list.Value">@list.Value</option> 
                    }
                </select>
            </div>
        </div>
        <div class="col">
            <div class="mb-3">
                <label>Select a year</label>
                <select class="form-select" disabled="@(yearSelectDisabled)" @onchange="async (arg) => await SelectListYear(arg.Value)">
                    <option selected> - </option>
                    @if (listsYearToSelect != null && listsYearToSelect.Count > 0)
                    {
                        @foreach (var year in listsYearToSelect)
                        {
                        <option value="@year.Value">@year.Value</option> 
                        }
                    }
                </select>
            </div>
        </div>
        <br/>
        @if (!loadingComparison)
        {
            <h3>@user.FullName:</h3>
            <TrackerStats TrackerStatsViewModel="@trackerStatsUser" ListSize="@topWinnersByCriticsCount" hideZeroed="@false"/>
            <h3>@visitor.FullName:</h3>
            <TrackerStats TrackerStatsViewModel="@trackerStatsVisitor" ListSize="@topWinnersByCriticsCount" hideZeroed="@false"/>
        }
        @if (loading)
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
    }
}
else
{
    <p>User not found</p>
}

<style>
    .track-filter {
        margin-right: 2em;
        display: inline-block;
    }

    .view-details-btn {
        display: inline-block;
    }
</style>

@code {
    [Parameter]
    public string nickname { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public int? trackStatus { get; set; }
    private User user;
    private User visitor;
    private bool isLoggedUser = false;
    private bool showTrackers = true;
    private bool compareLists = false;
    private bool alreadyFriend = false;
    private bool loadedFriendship = false;
    public List<KeyValuePair<long, string>> listsToSelect = new List<KeyValuePair<long, string>>();
    public List<KeyValuePair<long, int?>> listsYearToSelect = new List<KeyValuePair<long, int?>>();
    public string selectedListTitle = "-";
    public bool yearSelectDisabled { get; set; } = true;
    public int? selectedListYear { get; set; }
    private TrackerStatsViewModel trackerStatsUser = new TrackerStatsViewModel();
    private TrackerStatsViewModel trackerStatsVisitor = new TrackerStatsViewModel();
    private int topWinnersByCriticsCount = 0;
    private bool loadingComparison = true;
    private bool loading = false;

    protected override async Task OnParametersSetAsync()
    {
        user = _userService.GetByNickname(nickname);
        if (user != null)
        {
            isLoggedUser = _userService.GetLoggedUserNameIdentifier() == user.NameIdentifier;

            if (!isLoggedUser)
            {
                visitor = _userService.GetLoggedUser();
                if (visitor != null)
                {
                    alreadyFriend = await _userService.AreFriends(visitor.Id, user.Id);
                    loadedFriendship = true;
                    if (alreadyFriend)
                    {
                        listsToSelect = _gameListRequestService.GetAllGameListForSelectField();
                    }
                }
            }
        } 
    }

    private void onClickTab(bool showTrackers = false, bool compareLists = false) {
        this.showTrackers = this.compareLists = false;
        this.showTrackers = showTrackers;
        this.compareLists = compareLists;
    }

    private async Task SelectList(object listTitleObject)
    {
        loadingComparison = true;
        var listTitle = listTitleObject as string;
        selectedListTitle = listTitle;
        listsYearToSelect = _gameListRequestService.GetAllGameListYearForSelectField(listTitle);
        if (listsYearToSelect.All(x => x.Value == null))
        {
            yearSelectDisabled = true;
            selectedListYear = 0;
            if (!string.IsNullOrEmpty(selectedListTitle))
                await ShowListComparingResults();
        }
        else
            yearSelectDisabled = false;
    }

    private async Task SelectListYear(object listYearObject)
    {
        loadingComparison = true;
        var listYearString = listYearObject as string;
        var listYear = int.Parse(listYearString);
        selectedListYear = listYear;
        if (selectedListYear != null && selectedListYear.Value != 0)
            await ShowListComparingResults();
    }

    private async Task ShowListComparingResults()
    {
        loadingComparison = loading = true;
        loading = true;

        trackerStatsUser.Reset();
        trackerStatsVisitor.Reset();
        var slug = await _gameListRequestService.GetGameListSlugFromTitleAndYear(selectedListTitle, selectedListYear);
        (var topWinnersByCriticsUserDto, _, _, _, _) = _gameListService.GetBySlug(slug, userId: user.Id);
        (var topWinnersByCriticsVisitorDto, _, _, _, _) = _gameListService.GetBySlug(slug, userId: visitor.Id);
        trackerStatsUser = topWinnersByCriticsUserDto.TrackerStats;
        trackerStatsVisitor = topWinnersByCriticsVisitorDto.TrackerStats;
        topWinnersByCriticsCount = topWinnersByCriticsUserDto.TopGames.Count;

        loadingComparison = loading = false;
    }
}