@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace community.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="description" content="The greatest aggregator of ranked game lists">
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1.0, width=device-width">
    <meta content='yes' name='apple-mobile-web-app-capable'/>
    <meta content='yes' name='mobile-web-app-capable'/>
    <base href="~/" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
    <link href="css/site.css" rel="stylesheet" />
    <link href="community.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png"/>
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-B2Q3JP9Y1S"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());

        gtag('config', 'G-B2Q3JP9Y1S');
    </script>
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            Please, reload the page.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script type="text/javascript">
        async function downloadFileFromStream(fileName, contentStreamReference) {
            const arrayBuffer = await contentStreamReference.arrayBuffer();
            const blob = new Blob([arrayBuffer]);
            const url = URL.createObjectURL(blob);
            triggerFileDownload(fileName, url);
            URL.revokeObjectURL(url);
        }

        async function clipboardCopy(text) {
            navigator.clipboard.writeText(text).then(() => {
                console.log("Copied to clipboard!");
            })
            .catch((error) => {
                console.log(error);
            });
        }

        function triggerFileDownload(fileName, url) {
            const anchorElement = document.createElement('a');
            anchorElement.href = url;

            if (fileName) {
                anchorElement.download = fileName;
            }

            anchorElement.click();
            anchorElement.remove();
        }

        function isMobile() {
            return /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini|mobile/i.test(navigator.userAgent);
        }

        function checkIfScrolledToBottom(elementId) {
            const element = document.getElementById(elementId);
            if (element) {
                return Math.floor(element.scrollTop)+1 >= (element.scrollHeight - element.offsetHeight);
            }
            return false;
        }

        function getBoundingClientRect(element) {
            return element.getBoundingClientRect();
        }

        function drawArrayOnAllCanvas(boardRows,boardColumns,arrayString) {
            try {
                const canvases = document.querySelectorAll("[id^='canvas_']");
                for(const canvas of canvases) {
                    try {
                        const cellWidth = canvas.width/boardRows;
                        const cellHeight = canvas.height/boardColumns;
                        drawArrayOnCanvas(canvas,boardRows,boardColumns,cellWidth,cellHeight,arrayString)
                    }
                    catch(e) {
                        console.log(e);
                    }
                }
            }
            catch(e) {
                console.log(e);
            }
        }

        function drawArrayOnCanvas(canvasElement,boardRows,boardColumns,cellWidth,cellHeight,arrayString) {
            let array = JSON.parse(arrayString);
            let arrayPos = 0;
            for (let i = 0; i < boardRows; i++) {
                for (let j = 0; j < boardColumns; j++) {
                    let isErasing = false;
                    let color = "";
                    if (array[arrayPos] == null)
                        isErasing = true;
                    else {
                        isErasing = false;
                        color = array[arrayPos];
                    }
                    
                    arrayPos++;
                    drawOnCanvas(canvasElement,j,i,cellWidth,cellHeight,color,isErasing);
                }
            }
        }

        function drawOnCanvas(canvasElement,x,y,cellWidth,cellHeight,colorHex,erasing) {
            const ctx = canvasElement.getContext('2d');
            let color = colorHex;
            
            if (erasing) {
                ctx.globalCompositeOperation = 'destination-out';
            } else {
                ctx.globalCompositeOperation = 'source-over';
            }
            
            ctx.beginPath();
            ctx.rect(x * cellWidth, y * cellHeight, cellWidth, cellHeight);
            ctx.fillStyle = color;
            ctx.fill();
        }

        function scrollToElement(elementId) {
            const element = document.getElementById(elementId);
            if (element) {
                element.scrollIntoView({behavior:'smooth'});
                return true;
            }
            return false;
        }

        function addQueryToUrl(uri, param, value) {
            uri = uri.split('?')[0]
            const params = new URLSearchParams(location.search);
            params.set(param, value);
            history.replaceState(null, null, `${uri}?${params}`);
        }

        function getQueryParameter(parameter) {
            const params = new Proxy(new URLSearchParams(window.location.search), {
                get: (searchParams, prop) => searchParams.get(prop),
            });
            if (params)
                return params[parameter];
            return "";
        }
    </script>
</body>
</html>
