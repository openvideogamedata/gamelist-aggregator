@page "/admin/master-lists/new"
@using community.Dtos
@using community.Utils
@attribute [Authorize(Roles = "admin")]
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject GameListService GameListService

<PageTitle>Nova Lista Mestra</PageTitle>

@if (!initialized)
{
    <p><em>Carregando...</em></p>
}
else if (!isAuthorized)
{
    <p>Voce nao tem permissao para acessar esta pagina.</p>
}
else
{
    <div class="row mb-4">
        <div class="col">
            <h1>Criar nova lista mestra</h1>
            <p>Preencha os campos para cadastrar uma nova lista que agregara as demais listas comunitarias.</p>
        </div>
    </div>

    <EditForm Model="@formModel" OnValidSubmit="CreateFinalListAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label"><strong>Titulo</strong></label>
                <InputText class="form-control" @bind-Value="formModel.Title" @oninput="HandleTitleChange" />
            </div>
            <div class="col-md-3">
                <label class="form-label"><strong>Ano (opcional)</strong></label>
                <InputNumber TValue="int?" class="form-control" @bind-Value="formModel.Year" />
            </div>
            <div class="col-md-3">
                <label class="form-label"><strong>Slug</strong></label>
                <InputText class="form-control" @bind-Value="formModel.Slug" @oninput="HandleSlugChange" />
                <small class="form-text text-muted">Utilizado na URL; ajuste caso necessario.</small>
            </div>
        </div>

        <div class="row g-3 mt-1">
            <div class="col-md-6">
                <label class="form-label"><strong>URL de compartilhamento</strong></label>
                <InputText class="form-control" @bind-Value="formModel.SocialUrl" />
            </div>
            <div class="col-md-6">
                <label class="form-label"><strong>Tags</strong></label>
                <InputText class="form-control" @bind-Value="formModel.Tags" />
                <small class="form-text text-muted">Separe multiplas tags por virgula.</small>
            </div>
        </div>

        <div class="row g-3 mt-1">
            <div class="col-md-3">
                <div class="form-check mt-4">
                    <InputCheckbox class="form-check-input" @bind-Value="formModel.ConsideredForAvgScore" />
                    <label class="form-check-label">Considerar para media global</label>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-check mt-4">
                    <InputCheckbox class="form-check-input" @bind-Value="formModel.Pinned" @onchange="HandlePinnedChange" />
                    <label class="form-check-label">Fixar na home</label>
                </div>
            </div>
            <div class="col-md-3">
                <label class="form-label"><strong>Prioridade do pin</strong></label>
                <InputNumber TValue="int" class="form-control" @bind-Value="formModel.PinnedPriority" disabled="@(formModel.Pinned == false)" />
            </div>
            <div class="col-md-3">
                <label class="form-label"><strong>Numero inicial de comentarios</strong></label>
                <InputNumber TValue="int" class="form-control" @bind-Value="formModel.SocialComments" />
            </div>
        </div>

        <div class="mt-4">
            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                @(isSaving ? "Salvando..." : "Criar lista")
            </button>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(feedbackMessage))
    {
        <div class="alert @(feedbackSuccess ? "alert-success" : "alert-danger") mt-3" role="alert">
            @feedbackMessage
        </div>
    }
}

@code {
    private CreateFinalGameListDto formModel = new();
    private bool initialized = false;
    private bool isAuthorized = false;
    private bool isSaving = false;
    private bool slugManuallyEdited = false;
    private string feedbackMessage = string.Empty;
    private bool feedbackSuccess = false;

    protected override void OnInitialized()
    {
        if (!UserService.IsLogged())
        {
            var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/Identity/Login?returnUrl={returnUrl}", true);
            return;
        }

        var user = UserService.GetLoggedUser();
        isAuthorized = user?.Role == "admin";

        if (!isAuthorized)
        {
            NavigationManager.NavigateTo("/", true);
            return;
        }

        formModel = new CreateFinalGameListDto
        {
            SocialComments = 0,
            PinnedPriority = 0
        };

        initialized = true;
    }

    private void HandleTitleChange(ChangeEventArgs args)
    {
        if (!slugManuallyEdited)
        {
            var title = args.Value?.ToString() ?? string.Empty;
            formModel.Slug = title.ToUrlSlug();
        }
    }

    private void HandleSlugChange(ChangeEventArgs args)
    {
        slugManuallyEdited = !string.IsNullOrWhiteSpace(args.Value?.ToString());
    }

    private void HandlePinnedChange(ChangeEventArgs args)
    {
        if (formModel.Pinned == false)
        {
            formModel.PinnedPriority = 0;
        }
    }

    private async Task CreateFinalListAsync()
    {
        feedbackMessage = string.Empty;
        feedbackSuccess = false;
        isSaving = true;

        var response = await GameListService.CreateFinalGameListAsync(formModel);

        isSaving = false;
        feedbackSuccess = response.Success;
        feedbackMessage = string.IsNullOrWhiteSpace(response.Reason)
            ? response.Success ? "Lista criada com sucesso." : "Nao foi possivel criar a lista."
            : response.Reason;

        if (response.Success)
        {
            slugManuallyEdited = false;
            formModel = new CreateFinalGameListDto
            {
                SocialComments = 0,
                PinnedPriority = 0
            };
        }
    }
}
