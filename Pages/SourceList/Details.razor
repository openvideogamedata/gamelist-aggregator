@page "/view-list/{id:long}"
@inject ApplicationDbContext applicationDbContext; 
@using Microsoft.EntityFrameworkCore;
@using community.Utils
@using System.Text
@using Microsoft.JSInterop
@using System.IO
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject UserService _userService
@inject ApplicationDbContext _context

@if (sourceList is not null && sourceList.FinalGameList is not null)
{
    <PageTitle>@sourceList.FinalGameList.GetFullName()</PageTitle>
    <HeadContent>
        <meta name="description" content="Check out this list created by @GetListCreator(sourceList)">
    </HeadContent>

    <h1>
        <a class="link-sutil" href="list/@(sourceList.FinalGameList.Slug)">"@sourceList.FinalGameList.GetFullName()"</a>
        by
        @if(string.IsNullOrEmpty(GetListCreatorNickname(sourceList))) {
            @GetListCreator(sourceList)
        }
        else {
            <a class="link-sutil" href="users/@(GetListCreatorNickname(sourceList))">@GetListCreator(sourceList)</a>
        }
    </h1>

    @if (sourceList.ByUser) {
        <p>This list is used to generate the list <a href="list/@(sourceList.FinalGameList.Slug)/users">@sourceList.FinalGameList.GetFullName()</a> by Users</p>
    } else {
        <p>This list is used to generate the list <a href="list/@(sourceList.FinalGameList.Slug)/critics">@sourceList.FinalGameList.GetFullName()</a> by Critics</p>
    }
    
    <hr style="margin-bottom: 10px; margin-top: 25px; position: relative; z-index: -999;"/>

    <h2>The Top @sourceList.Items.Count Games</h2>
        
    @if (sourceList.Source is not null) {
        <p>Based on the list made by @sourceList.Source.Name <a class="source-tag-a" href="@sourceList.SourceListUrl" target="_blank">view full list</a> - last updated: @sourceList.DateLastUpdated.ToLastUpdatedFormat()</p>
    }
    @foreach (var result in sourceList.Items.OrderBy(item => item.Position).Select((value, index) => new { index, value }))
    {
        <div class="game-card">
            <a href="@GetGameUrl(result.value.GameId)">
                <GameCover style="@(friendListComparison != null && friendListComparison.CoincidentGameIds.Contains(result.value.GameId) ? "border: 5px; border-color: #26b050 !important;" : "")" src="@result.value.Game.CoverBigImageUrl" height="224" width="166" alt="@result.value.Game.Title"/>
            </a>
            <p class="game-card-title">@DisplayMedalForFirstPositions(result.index + 1) (@result.value.Game.FirstReleaseDate.Year)</p>
        </div>
    }

    <div class="row mt-3">
        <div class="col">
            <button class="btn btn-primary" @onclick="GoBack"><span class="oi oi-action-undo" aria-hidden="true"></span> Back</button>
            <input class="form-control not-show" readonly type="text" value="@text" />
            <CopyButton text="@text" />
            <button class="btn btn-primary" style="margin-left: 0.3em" @onclick="DownloadCsv"><span class="oi oi-data-transfer-download" aria-hidden="true"></span> Download CSV</button>
            @if (YourLists()) {
                <button class="btn btn-primary" style="margin-left: 0.3em" @onclick="() => GotoEditGameList(sourceList.Id, sourceList.FinalGameList.Slug)"><i class="oi oi-brush" aria-hidden="true"></i> Edit</button>
                <button class="btn btn-danger" style="margin-left: 0.3em" @onclick="() => DeleteGameList(sourceList.Id)"><i class="oi oi-trash" aria-hidden="true"></i> Delete</button>
            }
        </div>
    </div>

    @if (friendListComparison != null)
    {
        <p style="margin-top: 1em;">@GetListCreatorNickname(sourceList) likes <b>@friendListComparison.CompatibilityPercentage %</b> of the games on <a href="/view-list/@friendListComparison.UserComparingListId">your list.</a></p>
    }
} else {
    <p>List not found</p>
}

<style>
    .game-card-title {
        max-width: 180px; 
        margin: 0; 
        padding: 0; 
        text-align: center; 
        font-weight: bold;
    }

    .game-card {
        display: inline-block; 
        padding: 0.3em;
        margin: auto;
    }

    .game-card-cover {
        border-radius: 4px; 
        margin: 0.2em;
        cursor: pointer;
    }

    .not-show {
        display: none;
    }
</style>

@code {
    [Parameter]
    public long Id { get; set; }
    public GameList? sourceList = null;
    public string text { get; set; }
    public User? userLogged = null;
    public User? userOwnerOfList = null;
    public FriendsListComparisonResult? friendListComparison = null;

    protected override async Task OnParametersSetAsync() {
        text = "";
        friendListComparison = null;
        sourceList = applicationDbContext.GameLists.Include(gameList => gameList.FinalGameList)
                                                   .Include(gameList => gameList.Source)
                                                   .Include(gameList => gameList.UserContributed)
                                                   .Include(gameList => gameList.Items)
                                                   .ThenInclude(item => item.Game)
                                                   .FirstOrDefault(gameList => gameList.Id == Id);
        this.createClipboardList();
        this.userLogged = _userService.GetLoggedUser();
        userOwnerOfList = sourceList?.UserContributed;
        if (userLogged != null && userOwnerOfList != null && userLogged.Id != userOwnerOfList.Id)
            friendListComparison = await _userService.CompareListsIfFriends(userOwnerOfList.Id, userLogged.Id, sourceList);
    }

    private void createClipboardList() {
        if (sourceList is not null) {
            this.text += $"🏆 {sourceList.FinalGameList?.GetFullName()} by {@GetListCreator(sourceList)}\n\n";
            
            @foreach (var result in sourceList.Items.Select((value, index) => new { index, value })) {
                this.text += $"{DisplayMedalForFirstPositions(result.index + 1)} {result.value.GameTitle} ({result.value.Game.FirstReleaseDate.Year}) \n";  
            }

            this.text += "\n";

            if (sourceList.ByUser) {
                this.text += $"Source: https://www.openvideogamedata.com/view-list/{sourceList.Id}";
            } else {
                this.text += $"Source: https://www.openvideogamedata.com/view-list/{sourceList.Id}";
            }
        }
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }

    private string GetListCreator(GameList? gameList) {
        if (gameList is not null) {
            if (gameList.Source is not null) {
                return gameList.Source.Name;
            } else if (gameList.UserContributed is not null) {
                return gameList.UserContributed.FullName;
            }
        }

        return "Not Found!";
    }

    private string GetListCreatorNickname(GameList? gameList) {
        if (gameList is not null) {
            if (gameList.Source is not null) {
                return "";
            }
            if (gameList.UserContributed is not null) {
                return gameList.UserContributed.Nickname;
            }
        }

        return "";
    }

    private void ViewGame(long id)
    {
        NavigationManager.NavigateTo($"/game/{id.ToString()}");
    }

    private string DisplayMedalForFirstPositions(int position) {
        return position switch
        {
            1 => "1. 🥇",
            2 => "2. 🥈",
            3 => "3. 🥉",
            _ => $"{position.ToString()}."
        };
    }

    private void GotoEditGameList(long gameListId, string slug) {
        NavigationManager.NavigateTo($"/users/lists/edit/{slug}/{gameListId}");
    }

    private void DeleteGameList(long gameListId) {
        try
        {
            var gameList = _context.GameLists.Include(gameList => gameList.Items)
                                         .FirstOrDefault(gameList => gameList.Id == gameListId);

            if (gameList is not null && gameList.Items is not null && gameList.Items.Any()) {
                foreach(var item in gameList.Items) {
                    _context.Items.Remove(item);
                }
            }

            if (gameList is not null) {
                _context.GameLists.Remove(gameList);
            }

            _context.SaveChanges();
            this.GoBack();
        }
        catch(Exception e)
        {
            Console.WriteLine($"[ERRO] - DeleteGameList - {e}");
        }
    }

    private bool YourLists() {
        try
        {
            return userLogged?.Id == sourceList?.UserContributedId || userLogged?.Role == "admin";
        }
        catch(Exception e)
        {
            Console.WriteLine($"[ERRO] - YourLists - {e}");
            return false;
        }
    }

    private string GetGameUrl(long id)
    {
        return $"/game/{id.ToString()}";
    }

    private async Task DownloadCsv()
    {
        try
        {
            if (sourceList is null || sourceList.Items is null || sourceList.Items.Count == 0)
                return;

            var sb = new StringBuilder();
            sb.Append($"Position,Title,ReleaseDate,ExternalId,Score,GameId,CoverImageId{Environment.NewLine}");

            foreach (var item in sourceList.Items.OrderBy(i => i.Position))
            {
                var title = item.GameTitle ?? item.Game?.Title ?? string.Empty;
                var releaseDate = item.Game?.FirstReleaseDate.ToString("yyyy-MM-dd") ?? string.Empty;
                var externalId = item.Game?.ExternalId.ToString() ?? string.Empty;
                var coverImageId = item.Game?.ExternalCoverImageId ?? string.Empty;

                sb.Append($"{item.Position},{title},{releaseDate},{externalId},{item.Score},{item.GameId},{coverImageId}{Environment.NewLine}");
            }

            var bytes = Encoding.UTF8.GetBytes(sb.ToString());
            using var stream = new MemoryStream(bytes);
            using var streamRef = new DotNetStreamReference(stream);

            var sourceName = sourceList.Source?.Name ?? sourceList.UserContributed?.Nickname ?? "list";
            var timestamp = DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss");
            var fileName = $"{sourceName} - {timestamp}.csv";

            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch(Exception e)
        {
            Console.WriteLine($"[ERRO] - DownloadCsv - {e}");
        }
    }
}
