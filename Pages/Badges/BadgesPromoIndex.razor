@page "/badges/promo"
@inject UserService _userService
@inject NavigationManager NavigationManager

<PageTitle>Badges</PageTitle>
<HeadContent>
    <meta name="description" content="Which one have you got?">
</HeadContent>

<h1>Badges</h1>
<h3>Resgate um badge exclusivo</h3>
<div class="row">
    <div class="col-md-4 mb-3">
        <InputText class="form-control" @bind-Value="codigo"></InputText>
        @if (success)
        {
            <div class="text-success">
                <small>Badge resgatado com sucesso!</small>
            </div>
        }
        @if (fail)
        {
            <div class="text-danger">
                <small>Código inválido</small>
            </div>
        }
    </div>
    <div class="col-md-4 mb-3">
        <button disabled="@(loading)" @onclick="async () => await CheckCode()" class="btn btn-primary">Resgatar</button>
    </div>
</div>

@code {
    private User user;
    private string codigo = "";
    private bool loading = false;
    private bool success = false;
    private bool fail = false;
    
    protected override void OnInitialized()
    {
        user = _userService.GetLoggedUser();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            RedirectToLoginIfNotLogged();
    }

    private async Task CheckCode()
    {
        var semanaPosBgs = new DateTime(2023,10,22);
        var hoje = DateTime.Now.Date;
        success = false;
        fail = false;
        if (codigo.ToLower() == "bgs23open" && hoje < semanaPosBgs)
        {
            await _userService.GiveBadge(11, user.Id);
            codigo = "";
            success = true;
        }

        fail = !success;
    }

    private void RedirectToLoginIfNotLogged()
    {
        if (!_userService.IsLogged())
            NavigationManager.NavigateTo($"/Identity/Login?returnUrl={NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}", true);
    }
}



