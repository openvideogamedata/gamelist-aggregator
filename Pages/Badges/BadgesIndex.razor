@page "/badges"
@using System.Text.Json;
@inject UserService _userService
@inject NavigationManager NavigationManager

<PageTitle>Badges</PageTitle>
<HeadContent>
    <meta name="description" content="Which one have you got?">
</HeadContent>

<h1>Badges</h1>
@if (achievableBadges.Any())
{
    <div class="flex-container" style="margin-top: 1em;">
    @foreach (var badge in achievableBadges)
    {
        <div style="margin-right: 15px; margin-top: 20px; width: 53px;">
            <div class="tooltipi" style="font-size: 14px; margin-left: 5px;">
                <PixelEditor canEdit="@isAdmin" size="1" matrix="@badge.GetPixelArt()" showLoading="@false" matrixChanged="async (x) => await BadgePixelArtChanged(badge, x)"/>
                <span class="tooltipitext">@badge.Name: @badge.Description</span>
            </div>
            @if(userBadges.Any(x => x.Id == badge.Id))
            {
                <i class="oi oi-check" style="color:#26b050; top: -15px;" aria-hidden="true"></i>
            }
        </div>
    }
    </div>
}
else
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
<CascadingAuthenticationState>
    <AuthorizeView Roles="admin">
        <Authorized>
            <hr style="margin-top: 2em;"/>
            <ul class="nav nav-tabs mb-2">
                <li style="cursor: pointer;" class="nav-item">
                    <a class="nav-link prevent-select @(this.showAdd ? "active" : "")" @onclick="() => onClickTab(showAdd: true)">Add</a>
                </li>
                <li style="cursor: pointer;" class="nav-item">
                    <a class="nav-link prevent-select @(this.showUpdate ? "active" : "")" @onclick="() => onClickTab(showUpdate: true)">Update</a>
                </li>
                <li style="cursor: pointer;" class="nav-item">
                    <a class="nav-link prevent-select @(this.showBindUser ? "active" : "")" @onclick="() => onClickTab(showBindUser: true)">Bind</a>
                </li>
            </ul>
            @if (showAdd)
            {
                <h2>Add badge</h2>
                <div>Name:</div>
                <InputText class="form-control" @bind-Value="Name"></InputText>
                <div>Description:</div>
                <InputText class="form-control" @bind-Value="Description"></InputText>
                <div>AutomaticallyGiven:</div>
                <InputCheckbox @bind-Value="AutomaticallyGiven"></InputCheckbox>
                <div>Priority:</div>
                <InputNumber style="margin-bottom: 15px;" class="form-control" @bind-Value="Priority"></InputNumber>
                <PixelEditor canEdit="@isAdmin" openEditing="@true" size="4" matrix="@PixelArtMatrix" showLoading="@false" matrixChanged="(x) => SetNewBadgePixelArt(x)"/>
                <button disabled="@(saving)" @onclick="async () => await CreateBadge()" type="submit" class="btn btn-primary" style="margin-top: 15px;">Create</button>
            }
            @if (showUpdate)
            {
                <h2>Update badge</h2>
                <div>Insira o nome pra come√ßar</div>
                <div>Name:</div>
                <InputText class="form-control" @bind-Value="Name" @onblur="BuscarBadge"></InputText>
                <InputNumber disabled="true" class="form-control" @bind-Value="EditingBadgeId"></InputNumber>
                <div>Description:</div>
                <InputText class="form-control" @bind-Value="Description"></InputText>
                <div>AutomaticallyGiven:</div>
                <InputCheckbox @bind-Value="AutomaticallyGiven"></InputCheckbox>
                <div>Priority:</div>
                <InputNumber style="margin-bottom: 15px;" class="form-control" @bind-Value="Priority"></InputNumber>
                <PixelEditor canEdit="@isAdmin" openEditing="@true" size="4" matrix="@PixelArtMatrix" showLoading="@false" matrixChanged="(x) => SetNewBadgePixelArt(x)"/>
                <button disabled="@(saving)" @onclick="async () => await UpdateBadge()" type="submit" class="btn btn-primary" style="margin-top: 15px;">Update</button>
            }
            @if (showBindUser)
            {
                <h2>Bind User to Badge</h2>
                <div>Badge Name:</div>
                <InputText class="form-control" @bind-Value="Name" @onblur="BuscarBadge"></InputText>
                <InputNumber disabled="true" class="form-control" @bind-Value="EditingBadgeId"></InputNumber>
                <div>User Id:</div>
                <InputNumber style="margin-bottom: 15px;" class="form-control" @bind-Value="UserBindingId"></InputNumber>
                <div>Notify user:</div>
                <InputCheckbox @bind-Value="NotifyUser"></InputCheckbox>
                <button disabled="@(saving)" @onclick="async () => await Bind()" type="submit" class="btn btn-primary" style="margin-top: 15px;">Bind</button>
                <button disabled="@(saving)" @onclick="async () => await Unbind()" type="submit" class="btn btn-danger" style="margin-top: 15px;">Unbind</button>
            }
        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private User user;
    private IList<Badge> userBadges = new List<Badge>();
    private IList<Badge> allBadges = new List<Badge>();
    private IList<Badge> achievableBadges = new List<Badge>();
    private bool isAdmin = false;
    private bool showAdd = true;
    private bool showUpdate = false;
    private bool showBindUser = false;
    private string Name = "";
    private string Description = "";
    private string PixelArt = "";
    private string[]? PixelArtMatrix = null;
    private bool AutomaticallyGiven = false;
    private int Priority = 0;
    private bool saving = false;
    private bool NotifyUser = true;
    private long EditingBadgeId = 0;
    private long UserBindingId = 0;
    
    protected override async Task OnInitializedAsync()
    {
        allBadges = await _userService.GetAllBadges();
        achievableBadges = allBadges.Where(x => x.AutomaticallyGiven).ToList();
        user = _userService.GetLoggedUser();
        if (user != null)
        {
            isAdmin = user.Role == "admin";
            if (isAdmin)
                achievableBadges = allBadges;
            userBadges = await _userService.GetBadges(user.Id);
        }
    }

    private async Task BadgePixelArtChanged(Badge badge, string[] newMatrix)
    {
        saving = true;
        var success = await _userService.UpdateBadgePixelArt(newMatrix, badge);
        if (success)
            NavigationManager.NavigateTo("/badges", true);
    }

    private void SetNewBadgePixelArt(string[] newMatrix)
    {
        PixelArt = JsonSerializer.Serialize(newMatrix);
    }

    private async Task CreateBadge()
    {
        saving = true;
        if (CamposPreenchidos())
        {
            await _userService.CreateBadge(Name, Description, PixelArt, AutomaticallyGiven, Priority);
            NavigationManager.NavigateTo("/badges", true);
        }
    }

    private async Task UpdateBadge()
    {
        saving = true;
        if (CamposPreenchidos() && EditingBadgeId != 0)
        {
            await _userService.UpdateBadge(EditingBadgeId, Name, Description, PixelArt, AutomaticallyGiven, Priority);
            NavigationManager.NavigateTo("/badges", true);
        }
    }

    private async Task Bind()
    {
        saving = true;
        if (CamposPreenchidos() && EditingBadgeId != 0 && UserBindingId != 0)
        {
            await _userService.GiveBadge(EditingBadgeId, UserBindingId, NotifyUser);
            ResetFields();
        }
    }

    private async Task Unbind()
    {
        saving = true;
        if (CamposPreenchidos() && EditingBadgeId != 0 && UserBindingId != 0)
        {
            await _userService.RemoveBadge(EditingBadgeId, UserBindingId);
            ResetFields();
        }
    }

    private void onClickTab(bool showAdd = false, bool showUpdate = false, bool showBindUser = false) {
        this.showAdd = this.showUpdate = this.showBindUser = false;
        ResetFields();
        this.showAdd = showAdd;
        this.showUpdate = showUpdate;
        this.showBindUser = showBindUser;
    }

    private void BuscarBadge()
    {
        var badge = allBadges.FirstOrDefault(x => x.Name.ToLower() == Name.ToLower());
        if (badge != null)
        {
            Name = badge.Name;
            Description = badge.Description;
            PixelArt = badge.PixelArt;
            PixelArtMatrix = JsonSerializer.Deserialize<string[]>(badge.PixelArt);
            AutomaticallyGiven = badge.AutomaticallyGiven;
            Priority = badge.Priority;
            EditingBadgeId = badge.Id;
        }
        else
            ResetFields();
    }

    private void ResetFields()
    {
        Name = "";
        Description = "";
        PixelArt = "";
        PixelArtMatrix = null;
        AutomaticallyGiven = false;
        Priority = 0;
        EditingBadgeId = 0;
        UserBindingId = 0;
        saving = false;
    }
    
    private bool CamposPreenchidos()
    {
        return !string.IsNullOrEmpty(Name) && !string.IsNullOrEmpty(Description) && !string.IsNullOrEmpty(PixelArt);
    }
}

