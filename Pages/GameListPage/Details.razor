@page "/list/{slug}/{mode?}"
@using community.Data
@inject GameListService GameListService
@using System.IO
@inject IJSRuntime JS
@using community.Utils
@inject NavigationManager NavigationManager
@inject TrackerService _trackerService
@inject UserService _userService

@if(listNotFound) {
    <h2>Sorry, the list you were looking for was not found.</h2>
    <a href="">Keep browsing to find amazing lists</a>
}
else if (@finalGameList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <PageTitle>@finalGameList.Title @finalGameList.Year</PageTitle>
    <HeadContent>
        <meta name="description" content="Find out which games are in this ultimate list!">
    </HeadContent>

    <h1 class="mb-4">@finalGameList.Title @finalGameList.Year
    </h1>
    
    <ul class="nav nav-tabs mb-2">
        <li class="nav-item">
            <a class="nav-link prevent-select @(this.showTopWinners ? "active" : "")" @onclick="() => onClickTab(showTopWinners: true)"><i class="oi oi-star"></i> Top Winners</a>
        </li>
        <li class="nav-item">
            <a class="nav-link prevent-select @(this.showCitations ? "active" : "")" @onclick="() => onClickTab(showCitations: true)"><i class="oi oi-list"></i> Critics lists <span class="badge text-bg-secondary">@sourcesList.Count</span></a>
        </li>
        <li class="nav-item">
            <a class="nav-link prevent-select @(this.showUserLists ? "active" : "")" @onclick="() => onClickTab(showUserLists: true)"><i class="oi oi-list"></i> Users lists <span class="badge text-bg-secondary">@numberOfUsersLists</span></a>
        </li>
    </ul>

    @if (showTopWinners) 
    {
        @if(!showTopWinnersByCriticsOnly && !showTopWinnersByUsersOnly) {
            <div @onclick="() => ShowTopWinnersByCriticsOnly()" class="first-top-winners">
                <h2 class="top-winners-title">Top Games By Critics <a style="font-size: 0.7em" class="source-tag-a" @onclick="() => ShowTopWinnersByCriticsOnly()"> See More</a></h2>

                @if (topWinnersByCritics.Any()) {
                    <p class="top-winners-quote">Dynamically generated from <b>@sourcesList.Count</b> critic lists.</p>

                    @foreach (var result in topWinnersByCritics.Take(4).Select((value, index) => new { index, value }))
                    {
                        <div class="game-card game-card-@result.index">
                            <GameCover src="@result.value.CoverImageUrl" alt="@result.value.GameTitle" height="224" width="166" />
                            <p class="game-card-title">@DisplayMedalForFirstPositions(result.index + 1) (@result.value.FirstReleaseDate.Year)</p>
                            <p class="game-card-citation">Lists: @result.value.Citations (@result.value.PorcentageOfCitations.ToString()%)</p>
                            <p class="game-card-citation">Score: @result.value.Score</p>
                        </div>
                    }
                } else {
                    <p class="top-winners-quote">There are no critics lists yet. Help us include a source!</p>

                    @foreach (var i in Enumerable.Range(0,4))
                    {
                        <div class="game-card game-card-@i">
                            <GameCover src="https://images.igdb.com/igdb/image/upload/t_cover_big/nocover.png" height="224" width="166" />
                            <p class="game-card-title">@DisplayMedalForFirstPositions(@i + 1)</p>
                            <p class="game-card-citation">No lists</p>
                            <p class="game-card-citation">No score</p>
                        </div>
                    }
                }
            </div>
            <div @onclick="() => ShowTopWinnersByUsersOnly()" class="first-top-winners">
                <h2 class="top-winners-title">Top Games By Users <a style="font-size: 0.7em" class="source-tag-a" @onclick="() => ShowTopWinnersByCriticsOnly()"> See More</a></h2>

                @if (topWinnersByUsers.Any()) {
                    <p class="top-winners-quote">Dynamically generated from <b>@numberOfUsersLists</b> user lists.</p>

                    @foreach (var result in topWinnersByUsers.Take(4).Select((value, index) => new { index, value }))
                    {
                        <div class="game-card game-card-@result.index">
                            <GameCover src="@result.value.CoverImageUrl" alt="@result.value.GameTitle" height="224" width="166" />
                            <p class="game-card-title">@DisplayMedalForFirstPositions(result.index + 1) (@result.value.FirstReleaseDate.Year)</p>
                            <p class="game-card-citation">Lists: @result.value.Citations (@result.value.PorcentageOfCitations.ToString()%)</p>
                            <p class="game-card-citation">Score: @result.value.Score</p>
                        </div>
                    }
                } else {
                    <p class="top-winners-quote">There are no user lists yet. Be the first to create one!</p>

                    @foreach (var i in Enumerable.Range(0,4))
                    {
                        <div class="game-card game-card-@i">
                            <GameCover src="https://images.igdb.com/igdb/image/upload/t_cover_big/nocover.png" height="224" width="166" />
                            <p class="game-card-title">@DisplayMedalForFirstPositions(@i + 1)</p>
                            <p class="game-card-citation">No lists</p>
                            <p class="game-card-citation">No score</p>
                        </div>
                    }
                }
                
            </div>

            @if (finalGameList.SimilarLists.Any())
            {
                <h2 class="tag-title">Similar lists</h2>
                <hr style="margin-bottom: 10px; margin-top: 25px; position: relative; z-index: -999;"/>

                <div class="row">
                    <div class="col">
                        @foreach (var similarList in finalGameList.SimilarLists)
                        {
                            <span style="margin-right: 0.8em"> <a href="@similarList.SourceUrl">@similarList.SourceName</a> </span>
                        }
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(finalGameList.Tags))
            {
                <h2 class="tag-title">Tags</h2>
                <hr style="margin-bottom: 10px; margin-top: 25px; position: relative; z-index: -999;"/>

                <div class="row">
                    <div class="col">
                        @foreach (var tag in finalGameList.Tags.Split(",").ToList())
                        {
                            <span class="tag">@tag</span>
                        }
                    </div>
                </div>
            }

            @if (userIsAdmin)
            {
                <hr/>
                <label class="form-check-label" for="flexCheckDefault">
                    ADMIN: Consider for average
                </label>
                <InputCheckbox id="flexCheckDefault" @bind-Value="consideredForAvgScore" @oninput="((e)=>UpdateAvgConsideration(e))"></InputCheckbox>
            }
        }

        @if(showTopWinnersByCriticsOnly) {
            <div class="top-winners-container">
                <h2 class="top-winners-title">Top @topWinnersByCritics.Count Winners By Critic</h2>
                <p class="top-winners-quote">Dynamically generated from <b>@sourcesList.Count</b> lists (sorted by score).</p>
                @foreach (var result in topWinnersByCritics.Select((value, index) => new { index, value }))
                {
                    <div class="game-card">
                        <a href="@GetGameUrl(result.value.GameId)">
                            <GameCover src="@result.value.CoverImageUrl" alt="@result.value.GameTitle" height="224" width="166" />
                        </a>
                        <p class="game-card-title">@DisplayMedalForFirstPositions(@result.index + 1) (@result.value.FirstReleaseDate.Year) @GetTrackStatusIcon(@result.value.TrackStatus)</p>
                        <p class="game-card-citation">Lists: @result.value.Citations (@result.value.PorcentageOfCitations.ToString()%)</p>
                        <p class="game-card-citation">Score: @result.value.Score</p>
                    </div>
                }

                <TrackerStats TrackerStatsViewModel="@trackerStatsCritics" ListSize="@topWinnersByCritics.Count"/>

                <div class="form-inline mt-3">
                    <button type="button" class="btn btn-primary" @onclick="() => BackToAllTopWinners()"><span class="oi oi-action-undo" aria-hidden="true"></span> Back</button>
                    <CopyButton text="@textClipboardByCritics" />
                    <button type="button" class="btn btn-primary" @onclick="() => GotoComments()"><span class="oi oi-comment-square" aria-hidden="true"></span> @finalGameList.GetSocialComments() </button>
                    <button type="button" class="btn btn-primary" @onclick="() => AddNewList()"><span class="oi oi-plus" aria-hidden="true"></span> Add new list</button>
                </div>

                <div class="row">
                    <div class="col list-caption">
                        <p class="list-caption-item"><b>Lists:</b> It is the amount of lists in which the game appears
                        (if a game appears in all provided lists it will be 100%).</p>
                        <p class="list-caption-item"><b>Score:</b> It is generated based on the position of the game in the lists
                        (if the game is in first place your score will be 15).</p>
                    </div>
                </div>

                <h2>All Sources</h2>
                <div class="row">
                    <div class="col">
                        @foreach (var source in sourcesList)
                        {
                            <span class="source-tag"><a class="source-tag-a" href="@source.SourceUrl" target="_blank">@source.SourceName</a> @source.SourceDateLastUpdated.ToLastUpdatedFormat() </span>
                        }
                    </div>
                </div>

                <h2 class="mt-3">Top 5 Contributors</h2>

                <ul>
                    @foreach (var result in @contributors.Select((value, index) => new { index, value })) 
                    {
                        <li>
                            @DisplayMedalForFirstPositions(@result.index + 1) <a style="margin-left: 0px !important" href="/users/@result.value.Nickname">@result.value.FullName</a>
                            - Contributions: @result.value.NumberOfContributions (@result.value.PorcentageOfContributions%)
                        </li>
                    }
                </ul>
            </div>
        }

        @if(showTopWinnersByUsersOnly) {
            <div class="top-winners-container">
                <h2 class="top-winners-title">Top @topWinnersByUsers.Count Winners By Users</h2>
                <p class="top-winners-quote">Dynamically generated from <b>@numberOfUsersLists</b> user lists (sorted by score).</p>
                @foreach (var result in topWinnersByUsers.Select((value, index) => new { index, value }))
                {
                    <div class="game-card">
                        <a href="@GetGameUrl(result.value.GameId)">
                            <GameCover src="@result.value.CoverImageUrl" alt="@result.value.GameTitle" height="224" width="166" />
                        </a>
                        <p class="game-card-title">@DisplayMedalForFirstPositions(result.index + 1) (@result.value.FirstReleaseDate.Year) @GetTrackStatusIcon(@result.value.TrackStatus)</p>
                        <p class="game-card-citation">Lists: @result.value.Citations (@result.value.PorcentageOfCitations.ToString()%)</p>
                        <p class="game-card-citation">Score: @result.value.Score</p>
                    </div>
                }

                <TrackerStats TrackerStatsViewModel="@trackerStatsUsers" ListSize="@topWinnersByUsers.Count"/>

                <div class="form-inline mt-3">
                    <button type="button" class="btn btn-primary" @onclick="() => BackToAllTopWinners()"><span class="oi oi-action-undo" aria-hidden="true"></span> Back</button>
                    <CopyButton text="@textClipboardByUsers" />
                    <button type="button" class="btn btn-primary" @onclick="() => AddNewListUser()"><span class="oi oi-plus" aria-hidden="true"></span> Add new list</button>
                </div>

                <div class="row">
                    <div class="col list-caption">
                        <p class="list-caption-item"><b>Lists:</b> It is the amount of lists in which the game appears
                        (if a game appears in all provided lists it will be 100%).</p>
                        <p class="list-caption-item"><b>Score:</b> It is generated based on the position of the game in the lists
                        (if the game is in first place your score will be 15).</p>
                    </div>
                </div>
            </div>
        }
    }

    @if (showCitations) 
    {
        <h2 class="mt-3">All lists</h2>
        <p>Lists that have been aggregated to form this list</p>

        @foreach (var gameList in @gameLists) {
            <hr style="margin-bottom: 10px; margin-top: 25px; position: relative; z-index: -999;"/>
            <b>@gameList.Source.Name</b>
            <a class="source-tag-a" href="/view-list/@gameList.Id">view list</a>
            <span> - Contributor:</span>
            <a style="margin-left: 0px !important" href="/users/@gameList.UserContributed.Nickname">@gameList.UserContributed.FullName</a>
            <div>
                @foreach (var item in gameList.Items.OrderBy(item => item.Position)) {
                    <span class="citation-item"><b>@($"{@item.Position}.")</b> @item.GameTitle</span>
                }
            </div>
        }
        <Paginator pager="@pagerForCriticLists" OnPageClickEvent="@((args)=> GetAllCitationsBySlug(args.Item1))"/>

        <h2 class="mt-3">List suggestions</h2>
        <p>Lists that have been suggested by the community</p>
        <button type="button" style="margin-bottom: 15px;" class="btn btn-primary" @onclick="() => AddNewList()"><span class="oi oi-plus" aria-hidden="true"></span> Add new suggestion</button>

        <Contributions Slug="@slug"/>
    }

    @if (showUserLists) {
        <h2 class="mt-3">All lists</h2>
        <p>User lists that have been aggregated.</p>

        @foreach (var gameList in @gameListsFromUsers) {
            <hr style="margin-bottom: 10px; margin-top: 25px; position: relative; z-index: -999;"/>
            <span>Top Games By:</span>
            <a style="margin-left: 0px !important" href="/users/@gameList.UserContributed.Nickname">@gameList.UserContributed.FullName</a><span> - </span>
            <a class="source-tag-a" href="/view-list/@gameList.Id">view list</a>
            <div>
                @foreach (var item in gameList.Items.OrderBy(item => item.Position)) {
                    <span class="citation-item"><b>@($"{@item.Position}.")</b> @item.GameTitle</span>
                }
            </div>
        }
        <Paginator pager="@pagerForUserLists" OnPageClickEvent="@((args)=> GetAllUserListsBySlug(args.Item1))"/>

        <button type="button" class="btn btn-primary" @onclick="() => AddNewListUser()"><span class="oi oi-plus" aria-hidden="true"></span> Add new list</button>
    }

    <style>
        .game-card-title {
            max-width: 180px; 
            margin: 0; 
            padding: 0; 
            text-align: center; 
            font-weight: bold;
        }

        .game-card {
            display: inline-block; 
            padding: 0;
            margin: 0 auto;
        }

        .game-card-3 {
            display: none;
        }

        .game-card-cover {
            border-radius: 4px; 
            margin: 0.2em;
            cursor: pointer;
        }

        .game-card-citation {
            margin: 0; 
            padding: 0; 
            text-align: center; 
            font-style: italic;
        }

        .source-tag {
            display: inline-block;
            margin-left: 0.2em;
            margin-right: 0.2em;
            padding: 0.2em;
        }

        .not-show {
            display: none;
        }

        .list-caption {
            margin-top: 1em;
            margin-bottom: 2em;
        }

        .list-caption-item {
            margin-top: 0.1em;
            margin-bottom: 0.1em;
        }

        .prevent-select {
            -webkit-user-select: none; /* Safari */
            -ms-user-select: none; /* IE 10 and IE 11 */
            user-select: none; /* Standard syntax */
            cursor: pointer;
        }

        .first-top-winners {
            display: inline-block;
            margin-right: 2em;
            margin-top: 0.9em;
            cursor: pointer;
        }

        .top-winners-title {
            margin-bottom: 0;
        }

        .top-winners-quote {
            margin-bottom: 0;
        }

        .top-winners-container {
            margin-top: 0.9em;
        }

        .tag {
            display: inline-block;
            padding: 4px 8px;
            border: 1px solid #ccc;
            background-color: #f5f5f5;
            color: #333;
            font-size: 14px;
            border-radius: 4px;
            text-decoration: none;
            margin-left: 0.1em;
            margin-right: 0.1em;
        }

        .tag-title {
            margin-top: 1em;
        }

        @@media (max-width: 570px) {
            .game-card-3 {
                display: inline-block;
            }
        }
    </style>
}
@code {
    private List<GameList> gameLists = new List<GameList>();
    private List<GameList> gameListsFromUsers = new List<GameList>();
    private FinalGameList finalGameList = new FinalGameList();
    private List<GroupItem> topWinnersByCritics;
    private List<GroupItem> topWinnersByUsers;
    double numberOfUsersLists = 0;
    private List<SourceList> sourcesList;
    private List<Contributor> contributors = new List<Contributor>();
    private Pager pagerForCriticLists;
    private Pager pagerForUserLists;

    private bool listNotFound = false;
    private bool showTopWinners = false;
    private bool showTopWinnersByCriticsOnly = false;
    private bool showTopWinnersByUsersOnly = false;
    private bool showCitations = false;
    private bool showContributors = false;
    private bool showUserLists = false;

    public string textClipboardByCritics { get; set; }
    public string textClipboardByUsers { get; set; }
    public bool copied { get; set; } = false;

    [Parameter]
    public string slug { get; set; }
    [Parameter]
    public string mode { get; set; }

    public User? User { get; set; }
    private bool userIsAdmin = false;
    private bool consideredForAvgScore = true;

    private TrackerStatsViewModel trackerStatsCritics = new TrackerStatsViewModel();
    private TrackerStatsViewModel trackerStatsUsers = new TrackerStatsViewModel();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (this.slug.Equals("user")) {
            return;
        }
        
        this.showTopWinners = true;
        User = _userService.GetLoggedUser();
        var userId = User is not null ? User.Id : 0;
        userIsAdmin = User != null && User.Role == "admin";

        (var topWinnersByCriticsDto, var topWinnersByUsersDto, 
         sourcesList, finalGameList, 
         numberOfUsersLists) = GameListService.GetBySlug(this.slug, userId: userId);
        topWinnersByCritics = topWinnersByCriticsDto.TopGames;
        topWinnersByUsers = topWinnersByUsersDto.TopGames;
        trackerStatsCritics = topWinnersByCriticsDto.TrackerStats;
        trackerStatsUsers = topWinnersByUsersDto.TrackerStats;
        listNotFound = finalGameList == null;
        if (!listNotFound)
        {
            consideredForAvgScore = finalGameList.ConsideredForAvgScore;
            this.GetTopContributors();
            createClipboardListByCritics();
            createClipboardListByUsers();
        }
    }

    private MarkupString GetTrackStatusIcon(TrackStatus trackStatus) {
        switch(trackStatus)
        {
            case TrackStatus.ToPlay:
                return (MarkupString)"<i class=\"oi oi-list-rich\" style=\"color:#FFD369;\" aria-hidden=\"true\"></i>";
            case TrackStatus.Playing:
                return (MarkupString)"<i class=\"oi oi-chevron-right\" style=\"color:#FFD369;\" aria-hidden=\"true\"></i>";
            case TrackStatus.Played:
                return (MarkupString)"<i class=\"oi oi-check\" style=\"color:#26b050;\" aria-hidden=\"true\"></i>";
            case TrackStatus.Beated:
                return (MarkupString)"<i class=\"oi oi-circle-check\" style=\"color:#26b050;\" aria-hidden=\"true\"></i>";
            case TrackStatus.Abandoned:
                return (MarkupString)"<i class=\"oi oi-circle-x\" style=\"color:red;\" aria-hidden=\"true\"></i>";
            default:
                return (MarkupString)"";
        }
    }

    protected override void OnParametersSet()
    {
        if (mode == "users")
            ShowTopWinnersByUsersOnly();
        else if (mode == "critics")
            ShowTopWinnersByCriticsOnly();
        else if (mode == "critic-lists")
            onClickTab(showCitations: true);
        else if (mode == "user-lists")
            onClickTab(showUserLists: true);

    }

    private void createClipboardListByCritics() {
        this.textClipboardByCritics += $"🏆 {finalGameList.Title} {finalGameList.Year} \n\n";

        @foreach (var result in topWinnersByCritics.Select((value, index) => new { index, value })) {
            this.textClipboardByCritics += $"{DisplayMedalForFirstPositions(result.index + 1)} {result.value.GameTitle} ({result.value.FirstReleaseDate.Year}) \n"; 
        }

        this.textClipboardByCritics += $"\nBased on {sourcesList.Count} critics: ";

        @foreach (var result in sourcesList.Select((value, index) => new { index, value }))
        {
            if (result.index == (sourcesList.Count - 1)) {
                this.textClipboardByCritics += $" {result.value.SourceName}. ";
            } else {
                this.textClipboardByCritics += $" {result.value.SourceName}, ";
            }
        }

        this.textClipboardByCritics += "\n\n";
        this.textClipboardByCritics += $"Source: https://www.openvideogamedata.com/list/{this.slug}/critics";
    }

    private void createClipboardListByUsers() {
        this.textClipboardByUsers += $"🏆 {finalGameList.Title} {finalGameList.Year} \n\n";

        @foreach (var result in topWinnersByUsers.Select((value, index) => new { index, value })) {
            this.textClipboardByUsers += $"{DisplayMedalForFirstPositions(result.index + 1)} {result.value.GameTitle} ({result.value.FirstReleaseDate.Year}) \n"; 
        }

        var moreThanOneList = numberOfUsersLists > 1;
        this.textClipboardByUsers += $"\nBased on the {(moreThanOneList ? "lists" : "list")} of {numberOfUsersLists} {(moreThanOneList ? "users" : "user")}";
        this.textClipboardByUsers += "\n\n";
        this.textClipboardByUsers += $"Source: https://www.openvideogamedata.com/list/{this.slug}/users";
    }

    private string DisplayMedalForFirstPositions(int position) {
        return ListHelper.DisplayMedalForFirstPositions(position);
    }

    private void onClickTab(bool showTopWinners = false, bool showCitations = false, bool showUserLists = false) {
        this.showTopWinners = this.showCitations = this.showContributors = false;

        this.showTopWinners = showTopWinners;
        this.showCitations = showCitations;
        this.showUserLists = showUserLists;

        if (this.showTopWinners) {
            this.BackToAllTopWinners();
        }

        if (this.showCitations) {
            this.GetAllCitationsBySlug();
            if (!NavigationManager.Uri.Contains("/critic-lists"))
                NavigationManager.NavigateTo($"list/{slug}/critic-lists", false);
        }

        if (this.showUserLists) {
            this.GetAllUserListsBySlug();
            if (!NavigationManager.Uri.Contains("/user-lists"))
                NavigationManager.NavigateTo($"list/{slug}/user-lists", false);
        }
    }

    private void GetAllCitationsBySlug(int page = 1)
    {
        (gameLists, pagerForCriticLists) = GameListService.GetAllGameListsBySlug(this.slug, page, byUser: false);
    }

    private void GetAllUserListsBySlug(int page = 1)
    {
        (gameListsFromUsers, pagerForUserLists) = GameListService.GetAllGameListsBySlug(this.slug, page, pageSize: 5, byUser: true);
    }

    private void GetTopContributors()
    {
        this.contributors = GameListService.GetTopContributors(this.slug);
    }
    
    private async Task DownloadFileFromStream()
    {
        string text = "";

        text += $"Position,Game Title,Release Year,Number of Citations,Porcentage of Citations,Score (based on position weight){Environment.NewLine}";

        @foreach (var result in topWinnersByCritics.Select((value, index) => new { index, value })) {
            text += $"{result.index + 1},{result.value.GameTitle},{result.value.FirstReleaseDate.Year},{result.value.Citations.ToString()},{result.value.PorcentageOfCitations.ToString()},{result.value.Score.ToString()}{Environment.NewLine}"; 
        }

        MemoryStream stream = new MemoryStream();
        StreamWriter writer = new StreamWriter(stream);
        writer.Write(text.ToString());
        writer.Flush();
        stream.Position = 0;

        var fileName = $"{finalGameList.Title}.csv";
        using var streamRef = new DotNetStreamReference(stream: stream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

        private async Task DownloadSourcesFileFromStream()
    {
        string text = "";

        text += $"Source Name,Source Url{Environment.NewLine}";

        @foreach (var result in sourcesList.Select((value, index) => new { index, value })) {
            text += $"{result.value.SourceName},{result.value.SourceUrl}{Environment.NewLine}";
        }

        MemoryStream stream = new MemoryStream();
        StreamWriter writer = new StreamWriter(stream);
        writer.Write(text.ToString());
        writer.Flush();
        stream.Position = 0;

        var fileName = $"Sources for {finalGameList.Title}.csv";
        using var streamRef = new DotNetStreamReference(stream: stream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private void GotoComments()
    {
        JS.InvokeAsync<object>("open", finalGameList.SocialUrl, "_blank");
    }

    private void AddNewList()
    {
        NavigationManager.NavigateTo($"/new-list/{this.slug}");
    }

    private void AddNewListUser() {
        NavigationManager.NavigateTo($"/users/lists/new/{this.slug}");
    }

    private string GetGameUrl(long id)
    {
        return $"/game/{id.ToString()}";
    }

    private void BackToAllTopWinners() {
        this.copied = false;
        this.showTopWinnersByCriticsOnly = false;
        this.showTopWinnersByUsersOnly = false;
        NavigationManager.NavigateTo($"list/{slug}", false);
    }

    private void ShowTopWinnersByCriticsOnly() {
        this.copied = false;
        this.showTopWinnersByCriticsOnly = true;
        this.showTopWinnersByUsersOnly = false;
        if (!NavigationManager.Uri.Contains("/critics"))
            NavigationManager.NavigateTo($"list/{slug}/critics", false);
    }

    private void ShowTopWinnersByUsersOnly() {
        this.copied = false;
        this.showTopWinnersByCriticsOnly = false;
        this.showTopWinnersByUsersOnly = true;
        if (!NavigationManager.Uri.Contains("/users"))
            NavigationManager.NavigateTo($"list/{slug}/users", false);
    }

    private void UpdateAvgConsideration(ChangeEventArgs e) {
        GameListService.UpdateAvgConsideration(finalGameList.Id, (bool)e.Value);
    }
}