@page "/games-database"
@inject NavigationManager NavigationManager
@inject UserService _userService
@inject IJSRuntime JS
@inject IStringLocalizer<GamesIndex> Loc

<PageTitle>Open Video Game Data - Games</PageTitle>
<HeadContent>
    <meta name="description" content="@Loc["Subtitle"]">
</HeadContent>

<h1>@Loc["GamesTitle"]</h1>
<p>@Loc["GamesSubtitle"]</p>

<InputText disabled="@searching" class="form-control" @bind-Value="searchedGame" @onblur="SearchGame" @onkeydown="@PressedKey"/>
<div class="row">
    <div class="col">
        <i class="oi oi-list-rich" aria-hidden="true"></i> 
        <input class="form-check-input" type="radio" name="flexRadioDefault1" id="flexRadioDefault1" value="0" checked="@IsThisTrackStatus(TrackStatus.ToPlay)" @onchange="() => OnChangeRadioTracker(TrackStatus.ToPlay)">
        <div style="display: inline-block; margin-left: 3px;">@Loc["ToPlay"]</div>
        <input style="margin-left: 15px;" class="form-check-input" type="radio" name="flexRadioDefault2" id="flexRadioDefault2" value="1" checked="@IsThisTrackStatus(TrackStatus.Playing)" @onchange="() => OnChangeRadioTracker(TrackStatus.Playing)">
        <div style="display: inline-block; margin-left: 3px;">@Loc["Playing"]</div>
        <input style="margin-left: 15px;" class="form-check-input" type="radio" name="flexRadioDefault3" id="flexRadioDefault3" value="1" checked="@IsThisTrackStatus(TrackStatus.Beaten)" @onchange="() => OnChangeRadioTracker(TrackStatus.Beaten)">
        <div style="display: inline-block; margin-left: 3px;">@Loc["Beaten"]</div>
        <input style="margin-left: 15px;" class="form-check-input" type="radio" name="flexRadioDefault4" id="flexRadioDefault4" value="1" checked="@IsThisTrackStatus(TrackStatus.Abandoned)" @onchange="() => OnChangeRadioTracker(TrackStatus.Abandoned)">
        <div style="display: inline-block; margin-left: 3px;">@Loc["Abandoned"]</div>
        <input style="margin-left: 15px;" class="form-check-input" type="radio" name="flexRadioDefault5" id="flexRadioDefault5" value="1" checked="@IsThisTrackStatus(TrackStatus.Played)" @onchange="() => OnChangeRadioTracker(TrackStatus.Played)">
        <div style="display: inline-block; margin-left: 3px;">@Loc["Played"]</div>
    </div>
</div>
<div class="row">
    <div class="col">
        <i class="oi oi-sort-ascending" aria-hidden="true"></i> 
        <input class="form-check-input" type="radio" name="flexRadioDefault5" id="flexRadioDefault5" value="0" checked="@IsThisOrder(GamesOrder.ByLists)" @onchange="() => OnChangeRadioOrder(GamesOrder.ByLists)">
        <div style="display: inline-block; margin-left: 3px;">@Loc["Numberoflists"]</div>
        <input style="margin-left: 15px;" class="form-check-input" type="radio" name="flexRadioDefault6" id="flexRadioDefault6" value="1" checked="@IsThisOrder(GamesOrder.ByAvgPosition)" @onchange="() => OnChangeRadioOrder(GamesOrder.ByAvgPosition)">
        <div style="display: inline-block; margin-left: 3px;">@Loc["Averageposition"]</div>
    </div>
</div>
<Games Filters="@Filters"/>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? trackStatus { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public int? order { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string title { get; set; }
    
    private GameFilters Filters { get; set; } = null;
    private string searchedGame = "";
    private bool searching = false;
    private User? user = null;

    protected override async Task OnParametersSetAsync()
    {
        Filters = new GameFilters();
        user = _userService.GetLoggedUser();
        await LoadQueries();
    }
    
    private async Task SearchGame()
    {
        searching = true;
        Filters.SearchedText = searchedGame;
        await JS.InvokeVoidAsync("addQueryToUrl", NavigationManager.Uri, "title", searchedGame);
        searching = false;
    }

    private async Task OnChangeRadioTracker(TrackStatus status) 
    {
        searching = true;
        Filters.Status = status;
        await JS.InvokeVoidAsync("addQueryToUrl", NavigationManager.Uri, "trackStatus", (int)status);
        searching = false;
    }

    private async Task OnChangeRadioOrder(GamesOrder order)
    {
        searching = true;
        Filters.Order = order;
        await JS.InvokeVoidAsync("addQueryToUrl", NavigationManager.Uri, "order", (int)order);
        searching = false;
    }

    private bool IsThisTrackStatus(TrackStatus status) 
    {
        return Filters.Status == status;
    }

    private bool IsThisOrder(GamesOrder order) 
    {
        return Filters.Order == order;
    }

    private void PressedKey(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            SearchGame();
    }

    private async Task LoadQueries()
    {
        if (trackStatus != null || order != null || !string.IsNullOrEmpty(title))
            Filters = new GameFilters(trackStatus, order, title);
    }
}
