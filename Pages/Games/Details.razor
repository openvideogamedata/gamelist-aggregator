@page "/game/{id:long}"
@inject GameService GameService
@inject TrackerService _trackerService
@inject UserService _userService
@inject NavigationManager NavigationManager
@using community.Data
@using community.Utils

@if (game is not null) {
    <PageTitle>@game.Title (@game.FirstReleaseDate.Year)</PageTitle>
    <HeadContent>
        <meta name="description" content="Find out how many times this game was ranked in several categories!">
    </HeadContent>

    <h1>@game.Title (@game.FirstReleaseDate.Year)</h1>
    @if (avgPosition != 0)
    {
        <h3>
            <div style="display: inline-block; font-size: 34px; color: @avgColor;"><b>@avgPosition</b></div>/15
            <div class="tooltipi" style="top: -16px; font-size: 14px; margin-left: 5px;">
                (?)<span class="tooltipitext">Average position of this game over all lists and categories it appears</span>
            </div>
        </h3>
    }
    
    <hr style="margin-bottom: 10px; margin-top: 25px; position: relative; z-index: -999;"/>

    <div class="row">
        <div class="col-7 col-sm-12">
            <GameCover style="margin-left: 35px;" src="@game.CoverBigImageUrl" height="224" width="166" />
        </div>
        <div class="col-5 col-sm-12">
            @if (gameUserTracker is not null && gameUserTracker.Status == TrackStatus.ToPlay) {
                <button disabled="@loading" type="button" class="btn btn-secondary tracker-btn" @onclick="() => RemoveTrackerStatus()">
                    <i class="oi oi-list-rich" style="color:#FFD369;" aria-hidden="true"></i> To Play</button>
            } else {
                <button disabled="@loading" type="button" class="btn btn-primary tracker-btn" @onclick="() => CreateTracker(TrackStatus.ToPlay)">
                    <i class="oi oi-list-rich" aria-hidden="true"></i> To Play</button>
            }

            @if (gameUserTracker is not null && gameUserTracker.Status == TrackStatus.Playing) {
                <button disabled="@loading" type="button" class="btn btn-secondary tracker-btn" @onclick="() => RemoveTrackerStatus()">
                    <i class="oi oi-chevron-right" style="color:rgba(255, 255, 255, 0.1); aria-hidden="true"></i> Playing</button>
            } else {
                <button disabled="@loading" type="button" class="btn btn-primary tracker-btn" @onclick="() => CreateTracker(TrackStatus.Playing)">
                    <i class="oi oi-chevron-right" aria-hidden="true"></i> Playing</button>
            }

            @if (gameUserTracker is not null &&  gameUserTracker.Status == TrackStatus.Played) {
                <button disabled="@loading" type="button" class="btn btn-secondary tracker-btn" @onclick="() => RemoveTrackerStatus()">
                    <i class="oi oi-check" style="color:#26b050;" aria-hidden="true"></i> Played</button>
            } else {
                <button disabled="@loading" type="button" class="btn btn-primary tracker-btn" @onclick="() => CreateTracker(TrackStatus.Played)">
                    <i class="oi oi-check" aria-hidden="true"></i> Played</button>
            }

            @if (gameUserTracker is not null &&  gameUserTracker.Status == TrackStatus.Beated) {
                <button disabled="@loading" type="button" class="btn btn-secondary tracker-btn" @onclick="() => RemoveTrackerStatus()">
                    <i class="oi oi-circle-check" style="color:#26b050;" aria-hidden="true"></i> Beaten</button>
            } else {
                <button disabled="@loading" type="button" class="btn btn-primary tracker-btn" @onclick="() => CreateTracker(TrackStatus.Beated)">
                    <i class="oi oi-circle-check" aria-hidden="true"></i> Beaten</button>
            }

            @if (gameUserTracker is not null && gameUserTracker.Status == TrackStatus.Abandoned) {
                <button disabled="@loading" type="button" class="btn btn-secondary tracker-btn" @onclick="() => RemoveTrackerStatus()">
                    <i class="oi oi-circle-x" style="color:red;" aria-hidden="true"></i> Abandoned</button>
            } else {
                <button disabled="@loading" type="button" class="btn btn-primary tracker-btn" @onclick="() => CreateTracker(TrackStatus.Abandoned)">
                    <i class="oi oi-circle-x" aria-hidden="true"></i> Abandoned</button>
            }
        </div>
    </div>
    
    <div class="row">
        <div class="col"></div>
    </div>

    @if (gameUserTracker is not null) {
        <p><InputDate @onblur="LostFocus" @bind-Value="gameUserTracker.StatusDate" /></p>
        <div>
            <div class="col-sm-6 col-12">
                <InputTextArea maxlength="80" @bind-Value="@gameUserTracker.Note" @onblur="LostFocus" class="form-control note-text-box" id="exampleFormControlTextarea1" rows="3" disabled="@loading"></InputTextArea>
            </div>
        </div>
    }

    @if (friendsTrackers is not null && friendsTrackers.Any()) {
        <div class="row" style="margin-top:15px;">
            <div class="col">
            @foreach(var friendTracker in friendsTrackers.OrderByDescending(x => x.Note?.Length).Take(5))
            {
                @if (friendTracker.User != null)
                {
                    <div class="tooltipi" style="font-size: 14px; margin-left: 5px;">
                        <a class="only-show-desktop" href="/users/@friendTracker.User.Nickname/trackers">
                            <PixelEditor canEdit="@false" size="1" matrix="@friendTracker.User.GetUserPicture()" showLoading="@false" userNickname="@friendTracker.User.FullName"/>
                        </a>
                        <div class="only-show-mobile">
                            <PixelEditor canEdit="@false" size="1" matrix="@friendTracker.User.GetUserPicture()" showLoading="@false" userNickname="@friendTracker.User.FullName"/>
                        </div>
                        @if (!string.IsNullOrEmpty(friendTracker.Note))
                        {
                            <span class="tooltipitext">@friendTracker.User.Nickname: @friendTracker.Note</span>
                        }
                    </div>
                }
            }
            </div>
        </div>
    }
}
else
{
    <p>Game not Found!</p>
}

<hr style="margin-bottom: 10px; margin-top: 25px; position: relative; z-index: -999;"/>

@if (items != null) {
    @if (items.Any()) {
        <h2>Lists this game appears</h2>
        <div>Appears on @differentCategories different categories</div>
        <div style="margin-bottom:40px;">and is mostly cited on <a href="list/@(mostCitedSlug)">"@mostCitedOn"</a></div>
        @foreach (var item in items)
        {
            <ul>
                @if (item.GameList.Source != null)
                {
                    <li><a class="source-tag-a" href="@item.GameList.SourceListUrl" target="_blank">@item.GameList.Source.Name</a> at position <b>@item.Position</b> for <a href="list/@(item.FinalGameList.Slug)">"@item.FinalGameList.GetFullName()"</a> category.</li>
                }
            </ul>
        }

        <Paginator pager="@pager" OnPageClickEvent="@((args)=> GetCitations(args.Item1))"/>
    }
}

<style>
    .note-text-box {
        background-color: #30394c
    }

    .note-text-box:focus {
        background-color: rgba(255,255,255,0.25);
        color: white;
    }

    .tracker-btn {
        margin-bottom: 0.2em;
        margin-right: 0.2em;
        width: 8em;
    }

    .tracker-status-btn {
        margin-right: 1em;
        margin-left: 1em;
        margin-bottom: 1em;
        padding-bottom: 1em;
    }
</style>

@code {
    [Parameter]
    public long id { get; set; }

    private Game? game = null;
    private GameUserTracker? gameUserTracker = null;
    private User? user = null;
    private List<Item> items = null;
    private Pager pager;
    private List<GameUserTracker>? friendsTrackers;
    private bool loading = true;
    private int avgPosition = 0;
    private string avgColor = "";
    private int differentCategories = 0;
    private string mostCitedOn = "";
    private string mostCitedSlug = "";

    protected override async Task OnInitializedAsync() {
        game = GameService.GetGameById(id);
        user = _userService.GetLoggedUser();

        if (user is not null && game is not null) {
            this.gameUserTracker = await _trackerService.GetByGameIdAndUserIdAsync(user.Id, id);
            this.friendsTrackers = await _userService.GetFriendsCommentsOnGame(user.Id, id);
        }

        if (game != null) {
            avgPosition = GameService.GetScoreByGameId(id);
            
            if (avgPosition <= 15)
                avgColor = "#FFD369";
            if (avgPosition <= 10)
                avgColor = "#eeeeee";
            if (avgPosition <= 5)
                avgColor = "#00a458";
        }

        GetCitations();

        loading = false;
    }

    private async Task CreateTracker(TrackStatus trackStatus) {
        if (this.gameUserTracker is null &&
            this.game is not null &&
            this.user is not null) 
        {
            this.gameUserTracker = new GameUserTracker();
            this.gameUserTracker.UserId = this.user.Id;
            this.gameUserTracker.GameId = this.game.Id;
            this.gameUserTracker.StatusDate = DateTime.UtcNow;
        }

        if (this.gameUserTracker is not null) {
            this.gameUserTracker.Status = trackStatus;
            this.gameUserTracker.StatusDate = DateTime.UtcNow;
        }

        await this.CreateOrUpdateTracker();
    }

    private async Task RemoveTrackerStatus() {
        if (this.gameUserTracker is not null) {
            this.gameUserTracker.Status = TrackStatus.None;
            await this.CreateOrUpdateTracker();
        } 
    }

    private async Task LostFocus(FocusEventArgs args)
    {
        await this.CreateOrUpdateTracker();
    }

    private async Task CreateOrUpdateTracker()
    {
        loading = true;
        if (user is not null && this.gameUserTracker is not null)
        {
            var tracker = await _trackerService.CreateOrUpdate(this.gameUserTracker);
            await _userService.GiveBadge(3, user.Id);
            this.gameUserTracker = tracker;
        } else {
            RedirectToLoginIfNotLogged();
        }
        loading = false;
    }

    private void GetCitations(int page = 1)
    {
        var result = GameService.GetCitationsByGameId(id, page);
        items = result.Citations;
        pager = result.PagerResult;
        differentCategories = result.NumberOfCategories;
        mostCitedOn = result.MostCitedCategory;
        mostCitedSlug = result.MostCitedCategoryUrl;
    }

    private void RedirectToLoginIfNotLogged()
    {
        if (!_userService.IsLogged())
            NavigationManager.NavigateTo($"/Identity/Login?returnUrl={NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}", true);
    }
}