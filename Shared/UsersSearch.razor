@using community.Utils
@inject UserService _userService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<UsersSearch> Loc

@if (searching)
{
    <div class="spinner-border" role="status"></div>
}
else if (users != null)
{
    <table class="table">
        <tbody>
            @foreach (var user in users)
            {
                <tr style="border-style: none !important;">
                    <td style="border-bottom-width: 0px !important;" width="10px"><PixelEditor canEdit="@false" size="1" matrix="@user.GetUserPicture()" showLoading="false" userNickname="@user.FullName"/></td>
                    <td style="border-bottom-width: 0px !important;">
                        @user.FullName
                    </td>
                    <td style="border-bottom-width: 0px !important;"><a href="/users/@user.Nickname">@Loc["viewprofile"]</a></td>
                </tr>
            }
        </tbody>
    </table>

    <Paginator pager="@pager" OnPageClickEvent="@((args)=> GetUsers(args.Item1))"/>
}

@code {
    [Parameter]
    public GeneralFilters Filters { get; set; } = null;
    [Parameter]
    public EventCallback<GeneralFilters> FiltersChanged { get; set; }

    private List<User>? users;
    private Pager pager;
    private bool searching = false;
    private bool isLogged = false;

    protected override void OnInitialized()
    {
        isLogged = _userService.IsLogged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (isLogged)
        {
            if (Filters != null)
                await GetUsers();
            else
                users = null;
        }
        else
            users = null;
    }

    private async Task GetUsers(int page = 1)
    {
        if (isLogged)
        {
            searching = true;
            Filters.Page = page;
            if (!string.IsNullOrEmpty(Filters.SearchedText))
                (users, pager) = _userService.GetAll(Filters.Page, Filters.PageSize, Filters.MaxPages, Filters.SearchedText);
            else
                users = null;
            await FiltersChanged.InvokeAsync(Filters);
            searching = false;
        }
    }
}

