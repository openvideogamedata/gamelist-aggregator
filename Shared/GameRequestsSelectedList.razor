@inject GameService _gameService;
@inject IJSRuntime JS;
@inject NavigationManager _navigationManager;

<div>
    <div style="min-height: 10em; margin-top: 10px;">
        <div ondragover="event.preventDefault();">
        @foreach (var gameRequest in gamesRequests.Select((value, i) => new { i, value }))
        {
            <div class="row game-block-item"
                draggable="true"
                @key="gameRequest.i" tabindex="1"
                @ondrop="@(async ()=> await Drop(gameRequest.value))" 
                @ondrag="@(()=> StartDrag(gameRequest.value))">
                <div class="col-3">
                    <i class="oi oi-menu" aria-hidden="true"></i>
                    <div class="up-down-block">
                        @if (ShowUpGameButton(gameRequest.value)) {
                            <i class="oi oi-chevron-top up-down-item" @onclick="@(async ()=> UpGame(gameRequest.value))" aria-hidden="true"></i>
                        }
                        @if (ShowDownGameButton(gameRequest.value)) {
                            <i class="oi oi-chevron-bottom up-down-item" @onclick="@(async ()=> DownGame(gameRequest.value))" aria-hidden="true"></i>
                        }
                    </div>
                </div>
                <div class="col-7">
                    @if (isTracker) {
                        <span>@gameRequest.value.GameTitle @(!string.IsNullOrEmpty(@gameRequest.value.FirstReleaseDate) ? @gameRequest.value.FirstReleaseDate : "")</span>
                    } else {
                        <span><b>@(DisplayMedalForFirstPositions(gameRequest.i + 1))</b> - @gameRequest.value.GameTitle @(!string.IsNullOrEmpty(@gameRequest.value.FirstReleaseDate) ? @gameRequest.value.FirstReleaseDate : "")</span>
                    }
                </div>
                <div class="col-2">
                    <button disabled="@(saving)" class="btn btn-danger" @onclick="async () => await RemoveGameFromList(gameRequest.value)"><i class="oi oi-trash" aria-hidden="true"></i></button>
                </div>
            </div>
        }
        </div>
    </div>
</div>
<style>
    .game-block-item {
        margin-top: 0.4em;
        margin-bottom: 0.4em;
        padding: 0.3em;
    }

    .up-down-block {
        display: inline-block;
        width: 3.7em;
    }

    .up-down-item {
        padding: 0.4em;
    }
</style>

@code {
    [Parameter]
    public List<GameRequest> gamesRequests { get; set; } = new List<GameRequest>();
    [Parameter]
    public EventCallback<List<GameRequest>> gamesRequestsChanged { get; set; }
    [Parameter]
    public bool isTracker { get; set; } = false;
    private bool IsMobile = false;
    private bool saving = false;
    private int currentIndex = 0;

    public async Task SetGamesPositions()
    {
        foreach (var gameRequest in gamesRequests.Select((value, i) => new { i, value }))
            gameRequest.value.Position = gameRequest.i + 1;

        await gamesRequestsChanged.InvokeAsync(this.gamesRequests);
    }

    private string DisplayMedalForFirstPositions(int position) {
        return ListHelper.DisplayMedalForFirstPositions(position);
    }

    private bool ShowUpGameButton(GameRequest item) {
        var index = GetIndex(item);

        return index > 0;
    }

    private bool ShowDownGameButton(GameRequest item) {
        var index = GetIndex(item);

        return index < (gamesRequests.Count() - 1);
    }

    private async Task UpGame(GameRequest item) {
        var index = GetIndex(item);

        if (index > 0) {
            this.currentIndex = index - 1;
        }

        await this.Drop(item);
    }

    private async Task DownGame(GameRequest item) {
        var index = GetIndex(item);

        if (index < (gamesRequests.Count() - 1)) {
            this.currentIndex = index + 1;
        }

        await this.Drop(item);
    }

    private async Task RemoveGameFromList(GameRequest item)
    {
        var index = GetIndex(item);
        this.gamesRequests.RemoveAt(index);

        await gamesRequestsChanged.InvokeAsync(this.gamesRequests);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsMobile = await JS.InvokeAsync<bool>("isMobile");
            StateHasChanged();
        }
    }

    private void StartDrag(GameRequest item)
    {
        currentIndex = GetIndex(item);
    }

    private void ClickItem(GameRequest item)
    {
        currentIndex = GetIndex(item);
    }

    private int GetIndex(GameRequest item)
    {
        return gamesRequests.FindIndex(a => a.GameId == item.GameId);
    }

    private async Task Drop(GameRequest item)
    {
        if (item != null)
        {
            var index = GetIndex(item);
            var current = gamesRequests[currentIndex];
            gamesRequests.RemoveAt(currentIndex);
            gamesRequests.Insert(index, current);

            await SetGamesPositions();

            currentIndex = index;

            StateHasChanged();
        } 
        else
        {
            Console.WriteLine("Drop - null");
        }
    }
}