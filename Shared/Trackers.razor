@inject UserService _userService
@inject NavigationManager _navigationManager
@inject IJSRuntime JS
@inject IStringLocalizer<Trackers> Loc

@if (user != null && (trackersAvailable != null && trackersAvailable.Any(x => x.TrackStatus != TrackStatus.None)))
{
    @if (onlyShowFilteredStatus != null && onlyShowFilteredStatus.Value)
    {
        @if (trackersAvailable.FirstOrDefault() != null)
        {
            <h2 style="margin-top: 0.5em;" id="userTracker">@Loc[trackersAvailable.FirstOrDefault().TrackStatus.ToString()]  <a style="font-size: 0.6em" class="source-tag-a" href="users/@user.Nickname/trackers">@Loc["SeeMore"]</a></h2>
        }
        else
        {
            <h2 style="margin-top: 0.5em;">Tracker</h2>
        }
    }
    else
    {
        <h2 style="margin-top: 0.5em;" id="userTracker">Tracker</h2>
        <InputText class="form-control" @bind-Value="searchedText" @onblur="Search" @onkeydown="@PressedKey"/>
        @foreach (var trackFilter in trackersAvailable)
        {
            <div class="track-filter">
                <input class="form-check-input" type="radio" name="flexRadioDefault1" id="flexRadioDefault1" value="0" checked="@IsThisTrackStatus(trackFilter.TrackStatus)" @onchange="() => FilterTrackerBy(trackFilter, true)">
                <div style="display: inline-block; margin-left: 3px;">@Loc[@trackFilter.TrackStatus.ToString()] (@trackFilter.TrackStatusCount)</div>
            </div>
        }
    }
    
    @if (trackerFilters.Status != TrackStatus.Playing && trackerFilters.Status != TrackStatus.ToPlay && trackerFilters.Status != TrackStatus.None)
    {
        <p>@Loc["Game"]s @trackerFilters.Status.ToString() @Loc["in"] <YearSelector YearChangedCallback="HandleYearChanged" /> <button @onclick="() => ViewDetailsToggle()" class="btn btn-primary view-details-btn"><i class="oi oi-eye" aria-hidden="true"></i> @(viewDetails ? $"{Loc["HideDetails"]}" : $"{Loc["ViewDetails"]}" ) </button></p> 
    }
    <div class="row">
        <Games Filters="trackerFilters" UserNameId="@user.Nickname" ShowListsCount="false" ViewDetails="@viewDetails" IsTracker="true"/>
    </div>
}

@code {
    [Parameter]
    public User? user { get; set; }

    [Parameter]
    public int? trackStatus { get; set; }

    [Parameter]
    public bool? onlyShowFilteredStatus { get; set; }
    
    private GameFilters trackerFilters;
    private TrackStatus filteredStatus;
    private List<TrackFilters> trackersAvailable;
    private bool viewDetails = false;
    private bool scrolledToTracker = false;
    private string searchedText = "";

    protected override async Task OnParametersSetAsync()
    {
        onlyShowFilteredStatus = onlyShowFilteredStatus == null ? false : onlyShowFilteredStatus;
        trackersAvailable = new List<TrackFilters>();
        if (user != null)
        {
            await SetTrackers(user.Id);
        } 
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!scrolledToTracker && trackStatus != null && !onlyShowFilteredStatus.Value)
            if (!firstRender)
            {
                var success = await JS.InvokeAsync<bool>("scrollToElement", "userTracker");
                if (success)
                    scrolledToTracker = true;
            }
    }

    private async Task SetTrackers(long userId)
    {
        trackersAvailable = await _userService.GetTrackersByUserId(userId);

        if (trackersAvailable != null && onlyShowFilteredStatus.Value && trackStatus != null)
            trackersAvailable = trackersAvailable.Where(x => (int)x.TrackStatus == trackStatus).ToList();

        if (trackersAvailable != null)
            await SetInitialTracker(trackersAvailable);
    }

    private async Task SetInitialTracker(List<TrackFilters> trackers)
    {
        if (trackStatus != null)
        {
            if (EnumHelper.IsValidEnumValue(typeof(TrackStatus), trackStatus.Value))
            {
                var trackerStatusFiltered = (TrackStatus)trackStatus.Value;
                var filter = trackers.FirstOrDefault(x => x.TrackStatus == trackerStatusFiltered);
                if (filter != null)
                {
                    await FilterTrackerBy(filter);
                    return;
                }
            }
        }

        if (trackers.Any())
        {
            var beateds = trackers.FirstOrDefault(x => x.TrackStatus == TrackStatus.Beated);
            if (beateds != null)
            {
                var totalBeated = beateds.TrackStatusCount;
                if (totalBeated > 10)
                    await _userService.GiveBadge(6, user.Id);
                if (totalBeated > 50)
                    await _userService.GiveBadge(7, user.Id);
                if (totalBeated > 100)
                    await _userService.GiveBadge(8, user.Id);
            }
        }
        await FilterTrackerBy(trackers.FirstOrDefault());
    }

    private async Task FilterTrackerBy(TrackFilters trackFilter, bool updateQuery = false)
    {
        if (trackFilter != null)
        {
            if (updateQuery)
                await UpdateTrackerQueryString(trackFilter);

            filteredStatus = trackFilter.TrackStatus;
            if (trackerFilters == null)
                trackerFilters = new GameFilters() { Status = trackFilter.TrackStatus, TrackerYear = DateTime.UtcNow.Year };
            else
            {
                trackerFilters.Status = trackFilter.TrackStatus;
                trackerFilters.TrackerYear = DateTime.UtcNow.Year;
            }
        }
    }

    private async Task UpdateTrackerQueryString(TrackFilters trackFilter)
    {
        if (trackStatus == null || (trackStatus != null && trackStatus.Value != (int)trackFilter.TrackStatus))
        {
            await JS.InvokeVoidAsync("addQueryToUrl", _navigationManager.Uri, "trackStatus", (int)trackFilter.TrackStatus);
        }
    }

    private bool IsThisTrackStatus(TrackStatus status)
    {
        if (!string.IsNullOrEmpty(trackerFilters.SearchedText))
            return false;
        return filteredStatus == status;
    }

    private async Task HandleYearChanged(int? year)
    {
        this.trackerFilters.TrackerYear = year;
        await Task.CompletedTask;
    }

    private void ViewDetailsToggle()
    {
        this.viewDetails = !this.viewDetails;
    }

    private void Search()
    {
        if (!string.IsNullOrEmpty(searchedText))
            trackerFilters.Status = TrackStatus.None;
        trackerFilters.SearchedText = searchedText;
    }

    private void PressedKey(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            Search();
    }
}