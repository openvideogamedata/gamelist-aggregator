@using community.Utils
@inject IJSRuntime JS
@inject NavigationManager _navigationManager

<nav>
    <ul class="pagination justify-content-end">
        @if (pager != null)
        {
            @if (pager.Pages != null && pager.TotalPages > 1)
            {
                @if (pager.Pages.First() != 1)
                {
                    <li class="page-item">
                        <a class="page-link" style="cursor: pointer;" @onclick="() => OnPageClick(1,pager.PageSize)" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                }
                
                @foreach (var pageNumber in pager.Pages)
                {
                    <li class="@(pageNumber == pager.CurrentPage ? "page-item active" : "page-item")">
                        <a class="page-link" style="cursor: pointer;" @onclick="() => OnPageClick(pageNumber,pager.PageSize)">@pageNumber</a>
                    </li>
                }

                @if (pager.Pages.Last() != pager.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link" style="cursor: pointer;" @onclick="() => OnPageClick(pager.TotalPages,pager.PageSize)" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                }
            }
        }
    </ul>
</nav>

@code {
    [Parameter]
    public Pager pager { get; set; }

    [Parameter]
    public EventCallback<(int, int)> OnPageClickEvent { get; set; }

    public bool loadedQuery { get; set; } = false;

    private async Task OnPageClick(int pageClicked, int pageSize)
    {
        await OnPageClickEvent.InvokeAsync((pageClicked, pageSize));
        await JS.InvokeVoidAsync("addQueryToUrl", _navigationManager.Uri, "page", pageClicked);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!loadedQuery)
        {
            try
            {
                var currentPageQuery = await JS.InvokeAsync<string>("getQueryParameter", "page");
                if (!string.IsNullOrEmpty(currentPageQuery))
                {
                    var currentPage = int.Parse(currentPageQuery);
                    if (currentPage <= pager.TotalPages)
                        await OnPageClickEvent.InvokeAsync((currentPage, pager.PageSize));
                }
                loadedQuery = true;
            }
            catch { loadedQuery = true; }
        }
    }
}