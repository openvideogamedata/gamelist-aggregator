@using community.Data
@inject NavigationManager NavigationManager
@inject GameService _gameService
@inject TrackerService _trackerService
@inject UserService _userService
@using community.Utils
@inject IStringLocalizer<Games> Loc

<div class="row">
@if (searching)
{
    <div class="spinner-border" role="status"></div>
}
else
{
    @foreach (var game in games)
    {
        @if (ViewDetails) {
            <div class="col-sm-6 col-12">
                <hr style="margin-bottom: 10px; margin-top: 25px; position: relative; z-index: -999;"/>
                <div class="row">
                    <div class="col-sm-2 col-3">
                        <GameCover src="@game.CoverImageUrl" height="112" width="83" />
                    </div>
                    <div class="col-sm-10 col-9">
                        <p><a style="color: #EEEEEE;" href="/game/@game.Id">@game.Title (@game.FirstReleaseDate.Year)</a></p>
                        @if (ShowListsCount)
                        {
                            <div>@Loc["Lists"]: @game.NumberOfLists</div>
                            @if (game.Score < 16)
                            {
                                <div>@Loc["Avgposition"]: @game.Score</div>
                            }
                        }
                        @if (game.GameUserTracker is not null) {

                            @GetTrackStatus(game, Loc)

                            @if (!string.IsNullOrEmpty(game.GameUserTracker.Note)) 
                            {
                                <div class="row">
                                    <div class="col">
                                        <p class="dont-break-out"><i class="oi oi-document" aria-hidden="true"></i> @game.GameUserTracker.Note</p>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        } else {
            <div class="game-card-tracker">
                <a href="/game/@game.Id">
                    <GameCover src="@game.CoverBigImageUrl" height="224" width="166" />
                </a>
                <p class="game-card-title">@GetTrackStatus(game, Loc)</p>
            </div>
        }
    }
}
</div>

<style>
    .game-card-tracker {
        display: inline-block;
        width: 175px;
    }

    .dont-break-out {
        /* These are technically the same, but use both */
        overflow-wrap: break-word;
        word-wrap: break-word;

        -ms-word-break: break-all;
        /* This is the dangerous one in WebKit, as it breaks things wherever */
        word-break: break-all;
        /* Instead use this non-standard one: */
        word-break: break-word;

        /* Adds a hyphen where the word breaks, if supported (No Blink) */
        -ms-hyphens: auto;
        -moz-hyphens: auto;
        -webkit-hyphens: auto;
        hyphens: auto;

    }
</style>
<Paginator pager="@pager" OnPageClickEvent="@((args)=> GetAllGames(args.Item1))"/>

@if (isOnLastPage)
{
    <div class="row">
        <div class="col" style="margin-top:5em;">
            <label>
                @Loc["DidntFindGame"]
                <div class="tooltipi">
                    (?)<span class="tooltipitext">@Loc["GameSearchTooltip"]</span>
                </div>
            </label>
            <InputText disabled="@(false)" style="width:50%;" class="form-control" id="formGameIdInput" @bind-Value="gameTitle" @onkeydown="@PressedKey"/>
            <button disabled="@(searchingGame)" class="btn btn-info" @onclick="async () => await Search()">
                @if(searchingGame)
                {
                    <div class="spinner-border" role="status"></div>
                }
                else
                {
                    <div>üîç @Loc["Search"]</div>
                }
            </button>
        </div>
    </div>
    <GameSelector @ref="gameSelectorComponent" OnGameSelectEvent="@(async (args) => await SelectGame(args.Item1, args.Item2, args.Item3))"/>
}

@code {
    [Parameter]
    public GameFilters Filters { get; set; } = null;

    [Parameter]
    public EventCallback<GameFilters> FiltersChanged { get; set; }

    [Parameter]
    public bool ShowListsCount { get; set; } = true;

    [Parameter]
    public string UserNameId { get; set; }

    [Parameter]
    public bool ViewDetails { get; set; } = false;

    [Parameter]
    public bool IsTracker { get; set; } = false;

    private List<Game>? games = new List<Game>();
    private Pager pager;
    private bool searching = false;
    private bool showOnlyByUser = false;
    private User? user = null;
    private GameSelector? gameSelectorComponent;
    private string gameTitle = "";
    private bool searchingGame = false;
    private bool isOnLastPage = false;

    protected override async Task OnParametersSetAsync()
    {
        if (!IsTracker) {
            this.ViewDetails = true;
        }

        if (!string.IsNullOrEmpty(UserNameId))
            user = _userService.GetByNickname(UserNameId);
        else
            user = _userService.GetLoggedUser();

        showOnlyByUser = !string.IsNullOrEmpty(UserNameId);

        if (Filters != null && pager == null)
            await GetAllGames();
        else if (Filters != null)
            await GetAllGames(pager.CurrentPage);
        else
            games = new List<Game>();
    }

    private async Task GetAllGames(int page = 1)
    {
        searching = true;
        Filters.Page = page;

        if (IsTracker)
        {
            Filters.Order = GamesOrder.ByStatusDate;
        }

        (games, pager) = _gameService.GetGames(user?.Id ?? 0, page, Filters.SearchedText, Filters.Status, Filters.Order, showOnlyByUser, trackerYear: Filters.TrackerYear);
        
        await FiltersChanged.InvokeAsync(Filters);
        
        if (pager != null)
            isOnLastPage = (pager.CurrentPage == pager.TotalPages || pager.TotalPages == 0) && !IsTracker;
        searching = false;
    }

    private MarkupString GetTrackStatus(Game game, IStringLocalizer<Games> loc) {
        if (game.GameUserTracker is null)
            return (MarkupString)"";

        switch (game.GameUserTracker.Status)
        {
            case TrackStatus.ToPlay:
                return (MarkupString)$"<i class=\"oi oi-list-rich\" aria-hidden=\"true\"></i> {loc["ToPlay"]} <br> {game.GameUserTracker.GetTrackStatusDate()}";
            case TrackStatus.Playing:
                return (MarkupString)$"<i class=\"oi oi-chevron-right\" aria-hidden=\"true\"></i> {loc["Playing"]} <br> {game.GameUserTracker.GetTrackStatusDate()}";
            case TrackStatus.Beated:
                return (MarkupString)$"<i class=\"oi oi-circle-check\" aria-hidden=\"true\"></i> {loc["Beated"]} <br> {game.GameUserTracker.GetTrackStatusDate()}";
            case TrackStatus.Abandoned:
                return (MarkupString)$"<i class=\"oi oi-circle-x\" aria-hidden=\"true\"></i> {loc["Abandoned"]} <br> {game.GameUserTracker.GetTrackStatusDate()}";
            case TrackStatus.Played:
                return (MarkupString)$"<i class=\"oi oi-check\" aria-hidden=\"true\"></i> {loc["Played"]} <br> {game.GameUserTracker.GetTrackStatusDate()}";
            default:
                return (MarkupString)$"";
        }
    }

    private void PressedKey(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            Search();
    }

    private async Task Search()
    {
        searchingGame = true;
        await gameSelectorComponent.Search(this.gameTitle);
        searchingGame = false;
    }

    private async Task SelectGame(string gameName, string firstReleaseDate, long internalGameId)
    {
        this.gameTitle = "";
        Filters.SearchedText = gameName;
        await GetAllGames();
    }
}