@inject IJSRuntime JS
@using System.Text.Json;
@using System.Diagnostics;

<div>
    <div id="@containerId">
        @if (loading && showLoading)
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        <canvas @ref="canvasElement" id="@canvasId" width="@width" height="@height" hidden="@loading"
            @onmousemove="MouseMoved"
            @ontouchmove="TouchMoved"
            @onmousedown="MouseClicked"
            @onmouseup="MouseClicked"
            @ontouchstart="TouchClicked"
            @ontouchend="TouchClicked"
            @oncontextmenu:preventDefault="true"
            oncontextmenu="return false;">
        </canvas>
        @if (canEdit)
        {
            @if(!editing)
            {
                <div class="edit">
                    <button type="button" class="btn btn-primary" @onclick="async () => await ToggleEditPicture()"><span class="oi oi-brush" aria-hidden="true"></span></button>
                </div>
            }
        }
        
    </div>
    @if (canEdit && editing)
    {
        <div style="width: @(width)px;">
            <center>
                <button type="button" class="btn btn-primary" style="padding: 0 15px;" @onclick="async () => await ToggleEditPicture(true)"><span class="oi oi-action-undo" aria-hidden="true"></span></button>
                <button type="button" class="btn btn-danger" style="padding: 0 15px;" @onclick="async () => await ResetPicture()"><span class="oi oi-trash" aria-hidden="true"></span></button>
                <button type="button" class="btn btn-success" style="padding: 0 15px;" @onclick="async () => await ToggleEditPicture()"><span class="oi oi-check" aria-hidden="true"></span></button>
            </center>
        </div>
        <div class="buttons-container" style="width: @(width)px;">
        @foreach (var color in colors)
        {
            @if (selectedColor == color.hex)
            {
                <input type="button" id="@color.name" style="background-color: @(color.hex) !important; outline: 3px dashed white;" @onclick="() => ChangeColor(color.hex)"/>
            }
            else
            {
                <input type="button" id="@color.name" style="background-color: @(color.hex) !important;" @onclick="() => ChangeColor(color.hex)"/>
            }
        }
        </div>
    }
</div>

@code {
    [Parameter]
    public bool openEditing { get; set; } = false;
    [Parameter]
    public bool canEdit { get; set; }
    [Parameter]
    public int size { get; set; }
    [Parameter]
    public bool showLoading { get; set; } = true;
    [Parameter]
    public string[] matrix { get; set; }
    [Parameter]
    public EventCallback<string[]> matrixChanged { get; set; }
    [Parameter]
    public string userNickname { get; set; }

    public int boardRows = 8;
    public int boardColumns = 8;
    private string[] previousParameterMatrix;
    private string componentGuid = Guid.NewGuid().ToString();
    private string canvasId;
    private string canvasIdCss;
    private string containerId;
    private string containerIdCss;
    private int originalSize = 2;
    private bool editing = false;
    private ElementReference canvasElement;
    private int width = 32;
    private int height = 32;
    private string widthText = "32px";
    private string heightText = "32px";
    private int previousX = -1;
    private int previousY = -1;
    private int cellWidth;
    private int cellHeight;
    private bool drawing = false;
    private bool erasing = false;
    private bool hasFirstRendered = false;
    private bool hasUpdateMatrix = false;
    private bool loading = true;
    private string updateMatrixArrayString;
    private string[] editingMatrix;
    private string selectedColor = "#000000";
    private Stopwatch stopWatch = new Stopwatch();
    private TimeSpan delayCheckOffset = new TimeSpan(0,0,0,0,100);
    private List<(string name, string hex)> colors = new List<(string, string)>()
    {
        ("a","#FCFCFC"),
        ("b","#000000"),
        ("c","#a80020"),
        ("d","#ac7c00"),
        ("e","#503000"),
        ("f","#f87858"),
        ("g","#f0d0b0"),
        ("h","#f8d878"),
        ("i","#00b800"),
        ("j","#00a800"),
        ("k","#00fcfc"),
        ("l","#a4e4fc"),
        ("m","#3cbcfc"),
        ("n","#6844fc"),
        ("o","#f8a4c0")
    };

    protected override void OnInitialized()
    {
        canvasId = $"canvas_{componentGuid}";
        containerId = $"container_{componentGuid}";
        canvasIdCss = $"#{canvasId}";
        containerIdCss = $"#{containerId}";
        previousParameterMatrix = matrix;

        if (boardRows * boardColumns == 64)
            editingMatrix = GetDefault64PixelArt();
        else
            editingMatrix = new string[boardRows * boardColumns];
            
        originalSize = size;
        SetSize();
    }

    protected override async Task OnParametersSetAsync()
    {
        stopWatch.Start();
        if (matrix != null)
            editingMatrix = matrix.ToArray();
        if (matrix != previousParameterMatrix)
        {
            if (matrix == null)
                matrix = GetDefault64PixelArt();
            previousParameterMatrix = matrix;
            await LoadImageFromMatrix(false, matrix);
            StateHasChanged();
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasFirstRendered = true;
            await CheckAndLoadMatrix(true);
            if(canEdit && openEditing)
                await ToggleEditPicture();
            SetLoading(false);
        }
        if (hasUpdateMatrix)
        {
            hasUpdateMatrix = false;
            SetLoading(true);
            await JS.InvokeVoidAsync("drawArrayOnCanvas",canvasElement,boardRows,boardColumns,cellWidth,cellHeight,updateMatrixArrayString);
            SetLoading(false);
        }
    }

    private async Task CheckAndLoadMatrix(bool imediate = false, bool loadEditingMatrix = false)
    {
        if (matrix == null)
            loadEditingMatrix = true;

        SetLoading(true);
        if (matrix != null && !loadEditingMatrix)
        {
            if (matrix.Count() == boardRows * boardColumns)
            {
                await LoadImageFromMatrix(imediate, matrix);
            }
        }
        else
        {
            await LoadImageFromMatrix(imediate, editingMatrix);
        }
        SetLoading(false);
    }

    private async Task LoadImageFromMatrix(bool imediate, string[] matrixToDraw)
    {
        var arrayConvertedToColors = new string[boardRows * boardColumns];
        var arrayPos = 0;
        for (int i = 0; i < boardRows; i++)
        {
            for (int j = 0; j < boardColumns; j++)
            {
                if (matrixToDraw[arrayPos] != null)
                    arrayConvertedToColors[arrayPos] = GetColorFromKey(matrixToDraw[arrayPos]);
                arrayPos++;
            }
        }
        updateMatrixArrayString = JsonSerializer.Serialize(arrayConvertedToColors);
        if (imediate)
            await JS.InvokeVoidAsync("drawArrayOnCanvas",canvasElement,boardRows,boardColumns,cellWidth,cellHeight,updateMatrixArrayString);
        else
            hasUpdateMatrix = true;
    }

    private async Task UpdateMatrix()
    {
        matrix = editingMatrix.ToArray();
        await matrixChanged.InvokeAsync(this.matrix);
        await JS.InvokeVoidAsync("drawArrayOnAllCanvas",boardRows,boardColumns,updateMatrixArrayString);
    }

    private string GetColorFromKey(string key)
    {
        var color = colors.FirstOrDefault(x => x.name == key);
        return string.IsNullOrEmpty(color.hex) ? colors.First().hex : color.hex;
    }

    private void ChangeColor(string hex)
    {
        selectedColor = hex;
    }

    private async Task MouseMoved(MouseEventArgs e)
    {
        try
        {
            var absolutePos = await GetOffset(e.ClientX, e.ClientY);
            if (absolutePos.x != -1 && absolutePos.y != -1)
                await Draw(absolutePos.x, absolutePos.y);
        }
        catch {}
    }

    private async Task TouchMoved(TouchEventArgs e)
    {
        var absolutePos = await GetOffset(e.Touches[0].ClientX, e.Touches[0].ClientY);
        if (absolutePos.x != -1 && absolutePos.y != -1)
            await Draw(absolutePos.x, absolutePos.y);
    }

    private async Task MouseClicked(MouseEventArgs e)
    {
        if (e.Type == "mousedown")
        {
            if (e.Button == 0)
            {
                drawing = true;
                erasing = false;
            }
            else if (e.Button == 2)
            {
                erasing = true;
                drawing = false;
            }
            await MouseMoved(e);
        }
        else
        {
            drawing = false;
            erasing = false;
            previousX = -1;
            previousY = -1;
        }
    }

    private async Task TouchClicked(TouchEventArgs e)
    {
        if (e.Type == "touchstart")
        {
            drawing = true;
            erasing = false;
            await TouchMoved(e);
        }
        else if (e.Type == "touchend")
        {
            drawing = false;
            erasing = false;
            previousX = -1;
            previousY = -1;
        }
    }

    private async Task<(int x, int y)> GetOffset(double clientX, double clientY)
    {
        var allowedAfterDealy = stopWatch.Elapsed > delayCheckOffset;
        
        if (allowedAfterDealy)
        {
            stopWatch.Restart();
            if (editing && (drawing || erasing))
            {
                var boundingRect = await JS.InvokeAsync<BoundingClientRect>("getBoundingClientRect", canvasElement);
                var offsetX = (clientX - boundingRect.Left);
                var offsetY = (clientY - boundingRect.Top);
            
                var x = (int)((uint)offsetX | (uint)0);
                var y = (int)((uint)offsetY | (uint)0);

                return (x, y);
            }
            return (0, 0);
        }
        return (-1, -1);
    }

    private async Task Draw(int absoluteX, int absoluteY)
    {
        if (editing && (drawing || erasing))
        {
            decimal posX = (absoluteX + 0.0m)/(cellWidth + 0.0m);
            decimal posY = (absoluteY + 0.0m)/(cellHeight + 0.0m);
            var x = (int) Math.Floor(posX);
            var y = (int) Math.Floor(posY);
            
            if (ChangedPosition(x, y) && ChangedColor(x, y))
            {
                var arrayIndex = GetSingleDimensionArrayIndex(x, y);
                if (!erasing)
                    editingMatrix[arrayIndex] = colors.FirstOrDefault(x => x.hex == selectedColor).name;
                else
                    editingMatrix[arrayIndex] = null;
                await JS.InvokeVoidAsync("drawOnCanvas",canvasElement,x,y,cellWidth,cellHeight,selectedColor,erasing);
            }
        }
    }

    private bool ChangedPosition(int x, int y)
    {
        if (x != previousX || y != previousY)
        {
            previousX = x;
            previousY = y;
            return true;
        }
        return false;
    }

    private bool ChangedColor(int x, int y)
    {
        var currentColor = editingMatrix[GetSingleDimensionArrayIndex(x, y)];
        var newColor = colors.FirstOrDefault(x => x.hex == selectedColor).name;
        if (!erasing)
            return currentColor != newColor;
        return currentColor != null;
    }

    private async Task ResetPicture()
    {
        editingMatrix = Enumerable.Repeat("b", boardColumns * boardRows).ToArray();
        await CheckAndLoadMatrix(loadEditingMatrix: true);
    }

    private async Task ToggleEditPicture(bool canceled = false)
    {
        if (!editing)
        {
            editing = true;
            size = 4;
            SetSize();
        }
        else
        {
            editing = false;
            size = originalSize;
            SetSize();
            if (!canceled)
                await UpdateMatrix();
            else
            {
                if (matrix == null)
                    editingMatrix = GetDefault64PixelArt();
                else
                    editingMatrix = matrix.ToArray();
            }
        }
        await CheckAndLoadMatrix();
        SetLoading(false);
    }

    private void SetSize()
    {
        if (size == 1)
        {
            width = 32;
            height = 32;
        }
        if (size == 2)
        {
            width = 64;
            height = 64;
        }
        if (size == 3)
        {
            width = 128;
            height = 128;
        }
        if (size == 4)
        {
            width = 256;
            height = 256;
        }
        if (size == 5)
        {
            width = 512;
            height = 512;
        }

        widthText = $"{width}px";
        heightText = $"{height}px";

        cellWidth = width/boardRows;
        cellHeight = height/boardColumns;

        StateHasChanged();
    }

    private int GetSingleDimensionArrayIndex(int x, int y)
    {
        var arrayPos = 0;
        for (int i = 0; i < boardRows; i++)
        {
            for (int j = 0; j < boardColumns; j++)
            {
                if (x == j && y == i)
                    return arrayPos;
                arrayPos++;
            }
        }
        return arrayPos;
    }

    private string[] GetDefault64PixelArt()
    {
        var defaultMatrix = new string[64] {"l","m","l","m","l","m","l","m",
                                "m","l","m","l","m","l","m","l",
                                "l","m","b","m","l","b","l","m",
                                "m","l","b","l","m","b","m","l",
                                "l","m","l","m","l","m","l","m",
                                "m","b","m","l","m","l","b","l",
                                "l","b","b","b","b","b","b","m",
                                "m","l","m","l","m","l","m","l"};
        
        try
        {
            if (string.IsNullOrEmpty(userNickname))
                return defaultMatrix;

            Random r = new Random(GetSeedNumberFromNickname(userNickname));
            var pixelArt = new List<string>();

            var isBrown = r.Next(101) > 65;
            var isDark = r.Next(101) > 90;
            var minColor = 10;
            var maxColor = 13;
            var drawColor = "b";
            var backColor = "l";
            if (isDark)
            {
                minColor = 1;
                maxColor = 3;
                drawColor ="a";
                backColor = "b";
            }
            else if (isBrown)
            {
                minColor = 6;
                maxColor = 8;
                drawColor ="e";
                backColor = "g";
            }

            for(var i=0; i<64; i++)
            {
                var randomColor = colors[r.Next(minColor,maxColor)].name;
                if (i%2==0)
                    randomColor = backColor;
                pixelArt.Add(randomColor);
            }
            var result = pixelArt.ToArray();

            var eyes = r.Next(5);
            var mouth = r.Next(5);
            if (eyes == 0)
                result = GetAngryEyesPixelArt(result,drawColor);
            else if (eyes == 1)
                result = GetSadEyesPixelArt(result,drawColor);
            else if (eyes == 2)
                result = GetHappyEyesPixelArt(result,drawColor);
            else if (eyes == 3)
                result = GetSmallEyesPixelArt(result,drawColor);
            else if (eyes == 4)
                result = GetSurprisedEyesPixelArt(result,drawColor);
            else if (eyes == 5)
                result = GetSleepyEyesPixelArt(result,drawColor);
            if (mouth == 0)
                result = GetAngryMouthPixelArt(result,drawColor);
            else if (mouth == 1)
                result = GetSadMouthPixelArt(result,drawColor);
            else if (mouth == 2)
                result = GetHappyMouthPixelArt(result,drawColor);
            else if (mouth == 3)
                result = GetSmallMouthPixelArt(result,drawColor);
            else if (mouth == 4)
                result = GetSurprisedMouthPixelArt(result,drawColor);
            else if (mouth == 5)
                result = GetSleepyMouthPixelArt(result,drawColor);
            
            return result;
        }
        catch (Exception e)
        {
            return defaultMatrix;
        }
    }

    private string[] GetAngryEyesPixelArt(string[] m, string color)
    {
        var newMatrix = new string[64] {m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],
                                m[8],color,m[10],m[11],m[12],m[13],color,m[15],
                                m[16],m[17],color,m[19],m[20],color,m[22],m[23],
                                m[24],m[25],color,m[27],m[28],color,m[30],m[31],
                                m[32],m[33],m[34],m[35],m[36],m[37],m[38],m[39],
                                m[40],m[41],m[42],m[43],m[44],m[45],m[46],m[47],
                                m[48],m[49],m[50],m[51],m[52],m[53],m[54],m[55],
                                m[56],m[57],m[58],m[59],m[60],m[61],m[62],m[63]};
        return newMatrix;
    }

    private string[] GetSadEyesPixelArt(string[] m, string color)
    {
        var newMatrix = new string[64] {m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],
                                m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15],
                                m[16],m[17],color,m[19],m[20],color,m[22],m[23],
                                m[24],color,m[26],m[27],m[28],m[29],color,m[31],
                                m[32],m[33],m[34],m[35],m[36],m[37],m[38],m[39],
                                m[40],m[41],m[42],m[43],m[44],m[45],m[46],m[47],
                                m[48],m[49],m[50],m[51],m[52],m[53],m[54],m[55],
                                m[56],m[57],m[58],m[59],m[60],m[61],m[62],m[63]};
        return newMatrix;
    }

    private string[] GetHappyEyesPixelArt(string[] m, string color)
    {
        var newMatrix = new string[64] {m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],
                                m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15],
                                m[16],m[17],color,m[19],m[20],color,m[22],m[23],
                                m[24],color,m[26],color,color,m[29],color,m[31],
                                m[32],m[33],m[34],m[35],m[36],m[37],m[38],m[39],
                                m[40],m[41],m[42],m[43],m[44],m[45],m[46],m[47],
                                m[48],m[49],m[50],m[51],m[52],m[53],m[54],m[55],
                                m[56],m[57],m[58],m[59],m[60],m[61],m[62],m[63]};
        return newMatrix;
    }

    private string[] GetSmallEyesPixelArt(string[] m, string color)
    {
        var newMatrix = new string[64] {m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],
                                m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15],
                                m[16],m[17],color,m[19],m[20],color,m[22],m[23],
                                m[24],m[25],color,m[27],m[28],color,m[30],m[31],
                                m[32],m[33],m[34],m[35],m[36],m[37],m[38],m[39],
                                m[40],m[41],m[42],m[43],m[44],m[45],m[46],m[47],
                                m[48],m[49],m[50],m[51],m[52],m[53],m[54],m[55],
                                m[56],m[57],m[58],m[59],m[60],m[61],m[62],m[63]};
        return newMatrix;
    }

    private string[] GetSurprisedEyesPixelArt(string[] m, string color)
    {
        var newMatrix = new string[64] {m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],
                                m[8],m[9],color,m[11],m[12],color,m[14],m[15],
                                m[16],m[17],color,m[19],m[20],color,m[22],m[23],
                                m[24],m[25],color,m[27],m[28],color,m[30],m[31],
                                m[32],m[33],m[34],m[35],m[36],m[37],m[38],m[39],
                                m[40],m[41],m[42],m[43],m[44],m[45],m[46],m[47],
                                m[48],m[49],m[50],m[51],m[52],m[53],m[54],m[55],
                                m[56],m[57],m[58],m[59],m[60],m[61],m[62],m[63]};
        return newMatrix;
    }

    private string[] GetSleepyEyesPixelArt(string[] m, string color)
    {
        var newMatrix = new string[64] {m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],
                                m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15],
                                m[16],m[17],m[18],m[19],m[20],m[21],m[22],m[23],
                                m[24],color,color,m[27],m[28],color,color,m[31],
                                m[32],m[33],m[34],m[35],m[36],m[37],m[38],m[39],
                                m[40],m[41],m[42],m[43],m[44],m[45],m[46],m[47],
                                m[48],m[49],m[50],m[51],m[52],m[53],m[54],m[55],
                                m[56],m[57],m[58],m[59],m[60],m[61],m[62],m[63]};
        return newMatrix;
    }

    private string[] GetAngryMouthPixelArt(string[] m, string color)
    {
        var newMatrix = new string[64] {m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],
                                m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15],
                                m[16],m[17],m[18],m[19],m[20],m[21],m[22],m[23],
                                m[24],m[25],m[26],m[27],m[28],m[29],m[30],m[31],
                                m[32],m[33],m[34],m[35],m[36],m[37],m[38],m[39],
                                m[40],m[41],color,color,color,color,m[46],m[47],
                                m[48],color,color,color,color,color,color,m[55],
                                m[56],m[57],m[58],m[59],m[60],m[61],m[62],m[63]};
        return newMatrix;
    }

    private string[] GetSadMouthPixelArt(string[] m, string color)
    {
        var newMatrix = new string[64] {m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],
                                m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15],
                                m[16],m[17],m[18],m[19],m[20],m[21],m[22],m[23],
                                m[24],m[25],m[26],m[27],m[28],m[29],m[30],m[31],
                                m[32],m[33],m[34],m[35],m[36],m[37],m[38],m[39],
                                m[40],m[41],color,color,color,color,m[46],m[47],
                                m[48],m[49],color,m[51],m[52],color,m[54],m[55],
                                m[56],m[57],m[58],m[59],m[60],m[61],m[62],m[63]};
        return newMatrix;
    }

    private string[] GetHappyMouthPixelArt(string[] m, string color)
    {
        var newMatrix = new string[64] {m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],
                                m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15],
                                m[16],m[17],m[18],m[19],m[20],m[21],m[22],m[23],
                                m[24],m[25],m[26],m[27],m[28],m[29],m[30],m[31],
                                m[32],m[33],m[34],m[35],m[36],m[37],m[38],m[39],
                                m[40],color,m[42],m[43],m[44],m[45],color,m[47],
                                m[48],color,color,color,color,color,color,m[55],
                                m[56],m[57],m[58],m[59],m[60],m[61],m[62],m[63]};
        return newMatrix;
    }

    private string[] GetSmallMouthPixelArt(string[] m, string color)
    {
        var newMatrix = new string[64] {m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],
                                m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15],
                                m[16],m[17],m[18],m[19],m[20],m[21],m[22],m[23],
                                m[24],m[25],m[26],m[27],m[28],m[29],m[30],m[31],
                                m[32],m[33],m[34],m[35],m[36],m[37],m[38],m[39],
                                m[40],m[41],m[42],m[43],m[44],m[45],m[46],m[47],
                                m[48],m[49],m[50],color,color,m[53],m[54],m[55],
                                m[56],m[57],m[58],m[59],m[60],m[61],m[62],m[63]};
        return newMatrix;
    }

    private string[] GetSurprisedMouthPixelArt(string[] m, string color)
    {
        var newMatrix = new string[64] {m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],
                                m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15],
                                m[16],m[17],m[18],m[19],m[20],m[21],m[22],m[23],
                                m[24],m[25],m[26],m[27],m[28],m[29],m[30],m[31],
                                m[32],m[33],m[34],m[35],m[36],m[37],m[38],m[39],
                                m[40],m[41],m[42],color,color,m[45],m[46],m[47],
                                m[48],m[49],m[50],color,color,m[53],m[54],m[55],
                                m[56],m[57],m[58],m[59],m[60],m[61],m[62],m[63]};
        return newMatrix;
    }

    private string[] GetSleepyMouthPixelArt(string[] m, string color)
    {
        var newMatrix = new string[64] {m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],
                                m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15],
                                m[16],m[17],m[18],m[19],m[20],m[21],m[22],m[23],
                                m[24],m[25],m[26],m[27],m[28],m[29],m[30],m[31],
                                m[32],m[33],m[34],m[35],m[36],m[37],m[38],m[39],
                                m[40],m[41],m[42],m[43],m[44],m[45],m[46],m[47],
                                m[48],m[49],color,color,color,color,m[54],m[55],
                                m[56],m[57],m[58],m[59],m[60],m[61],m[62],m[63]};
        return newMatrix;
    }

    private int GetSeedNumberFromNickname(string nick)
    {
        try
        {
            var firstNick = nick.Split(' ')[0];
            var subSize = firstNick.Length > 6 ? 6 : firstNick.Length;
            var numericValue = 0;
            for (var i=0; i<subSize; i++)
            {
                numericValue += char.ToUpper(firstNick[i]) - 64;
            }
            return numericValue;
        }
        catch(Exception)
        {
            return 0;
        }
    }

    private void SetLoading(bool value)
    {
        loading = value;
        StateHasChanged();
    }
}

<style>
    input[type=button] {
        border: none;
        padding: 20px;
        margin: 2px 2px;
        cursor: pointer;
        height:16px;
        width:16px;
    }

    .buttons-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-evenly;
        align-items: stretch;
        align-content: space-around;
    }

    @containerIdCss {
        width: @widthText;
        height: @heightText;
        position: relative;
    }

    @canvasIdCss {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }

    .edit  {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }

    .edit {
        display: none;
    }

    .edit:hover {
        display: block;
        z-index: 10;
    }

    @canvasIdCss:hover ~ .edit {
        display: block;
        z-index: 10;
    }
</style>