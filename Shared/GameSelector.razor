@using System.Text.Json;
@using community.Dtos;
@inject GameService _gameService;
@inject IJSRuntime JS;
@inject NavigationManager _navigationManager;
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

<div>
    @if (this.Games.Any())
    {
        @if (this.IsMobile)
        {
            <select class="form-select" @onchange="(arg) => SelectGame(arg.Value as string)">
                <option selected> Select a game </option>
                @foreach (var game in this.Games)
                {
                    <option value="@game.Id§@game.Name§@game.FirstReleaseDate§@game.Cover?.ImageId§@game.FirstReleaseDateText">@game.Name @game.FirstReleaseDateText</option> 
                }
                @if (!OnLastPage)
                {
                    <option value="next">load more...</option> 
                }
            </select>
        }
        else
        {
            <div class="row">
                <div class="col">
                    <div class="form-control select-sim">
                        <div class="options" id="gameSelectorDesktop" @onscroll="OnScroll">
                            @foreach (var game in this.Games)
                            {
                                <div class="option">
                                    <input type="radio" name="game" value="@game.Name" id="@game.Id" @onclick="async () => await SelectGame(game)" />
                                    <label for="@game.Id">
                                        @if (!string.IsNullOrEmpty(game.Cover.Url))
                                        {
                                            <img src="@game.Cover.Url" alt="@game.Name" height="88" width="66"/> @game.Name @game.FirstReleaseDateText
                                        }
                                        else
                                        {
                                            <img src="https://images.igdb.com/igdb/image/upload/t_cover_big/nocover.png" alt="@game.Name" height="88" width="66"/> @game.Name @game.FirstReleaseDateText
                                        }
                                    </label>
                                </div>
                            }
                            @if (!OnLastPage)
                            {
                                <div class="option">
                                    <label for="loading">
                                        <div class="spinner-border" role="status"></div>
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>
<style>
    .select-sim {
        width:100%;
        height:40px;
        line-height:90px;
        vertical-align:middle;
        position:relative;
        background:#393E46;
        border:1px solid #414750;
        overflow:hidden;
    }

    .select-sim::after {
        content:"▼";
        font-size:0.5em;
        font-family:arial;
        position:absolute;
        top:50%;
        right:5px;
        transform:translate(0, -50%);
    }

    .select-sim:hover::after {
        content:"";
    }

    .select-sim:hover {
        overflow:visible;
    }

    .select-sim:hover .options .option label {
        display:inline-block;
    }

    .select-sim:hover .options {
        background:#393E46;
        border:1px solid #414750;
        position:absolute;
        top:-1px;
        left:-1px;
        width:100%;
        height:300px;
        overflow-y:scroll;
    }

    .select-sim .options .option {
        overflow:hidden;
    }

    .select-sim:hover .options .option {
        height:90px;
        overflow:hidden;
    }

    .select-sim .options .option img {
        vertical-align:middle;
    }

    .select-sim .options .option label {
        display:none;
    }

    .select-sim .options .option input {
        width:0;
        height:0;
        overflow:hidden;
        margin:0;
        padding:0;
        float:left;
        display:inline-block;
        /* fix specific for Firefox */
        position: absolute;
        left: -10000px;
    }

    .select-sim .options .option input:checked + label {
        display:block;
        width:100%;
    }

    .select-sim:hover .options .option input + label {
        display:block;
    }

    .select-sim:hover .options .option input:checked + label {
        background:#404752;
    }
</style>

@code {
    [Parameter]
    public EventCallback<(string, string, long)> OnGameSelectEvent { get; set; }

    private string YOUR_CLIENT_ID = string.Empty;
    private string YOUR_APP_ACCESS_TOKEN = string.Empty;
    public string AccessToken { get; set; } = "";
    private static readonly HttpClient client = new();
    private List<GetGameApiReturn> Games { get; set; } = new List<GetGameApiReturn>();
    private GetGameApiReturn SelectedGame { get; set; } = new GetGameApiReturn();
    private long SelectedGameInternalId { get; set; } = 0;
    private long OneYearUnix = 31556926;
    private bool IsMobile = false;
    private bool OnLastPage = false;
    private bool OnRegularLastPage = false;
    private bool OnExtrasLastPage = false;
    private int Page = 0;
    private int ExtrasPage = -1;
    private int PageSize = 15;
    private string SearchedGame = "";
    private bool ScrolledToBottom = false;
    private bool Searching = false;

    protected override async Task OnInitializedAsync()
    {
        YOUR_CLIENT_ID = Configuration["IGDB:ClientId"] ?? "";
        YOUR_APP_ACCESS_TOKEN = Configuration["IGDB:ClientSecret"] ?? "";

        await LogOnApi();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsMobile = await JS.InvokeAsync<bool>("isMobile");
            StateHasChanged();
        }
    }

    private async Task OnScroll()
    {
        ScrolledToBottom = await JS.InvokeAsync<bool>("checkIfScrolledToBottom", "gameSelectorDesktop");
        await LoadNextPage();
    }

    private async Task LoadNextPage()
    {
        if (!Searching)
        {
            var isOnExtras = OnRegularLastPage && !OnExtrasLastPage;
            if (!OnLastPage)
            {
                if (ScrolledToBottom || IsMobile)
                {
                    if (isOnExtras)
                        ExtrasPage++;
                    else
                        Page++;

                    await LogOnApi();
                    ScrolledToBottom = false;
                }
            }
            else
                ScrolledToBottom = false;
        }
    }

    public async Task Search(string game)
    {
        ResetVariables();
        SearchedGame = game;
        await LogOnApi();
    }

    private async Task LogOnApi()
    {
        try
        {
            Searching = true;
            var baseUrl = "https://id.twitch.tv/oauth2/token";
            var values = new Dictionary<string, string>
            {
                { "client_id", YOUR_CLIENT_ID },
                { "client_secret", YOUR_APP_ACCESS_TOKEN },
                { "grant_type", "client_credentials" }
            };
            var content = new FormUrlEncodedContent(values);

            if (AccessToken == "")
            {
                var response = await client.PostAsync(baseUrl, content);
                
                if (response.StatusCode == System.Net.HttpStatusCode.OK) 
                {
                    var result = await response.Content.ReadAsStringAsync();

                    var loginApiReturn = JsonSerializer.Deserialize<LoginApiReturn>(result);
                    this.AccessToken = loginApiReturn.AccessToken;
                }
            }

            await GetGameByName();
            Searching = false;
        }
        catch(Exception e)
        {
            Console.WriteLine($"[ERRO] - LogOnApi - {e.Message}", e);
        }
    }

    private async Task GetGameByName()
    {
        try
        {
            var gameTitle = SearchedGame;
            if (string.IsNullOrEmpty(gameTitle)) return;

            var gameName = "";
            var gameYear = "";
            var isOnExtras = OnRegularLastPage && !OnExtrasLastPage;
            var offset = isOnExtras? ExtrasPage*PageSize : Page*PageSize;
            long gameYearUnix = 0;
            if (gameTitle.Contains(','))
            {
                gameName = gameTitle.Split(',').First();
                gameYear = gameTitle.Split(',').Last().Trim();
                gameYearUnix = ConvertYearToUnixTime(gameYear);
            }
            else
                gameName = gameTitle;

            var rawData = $"fields name, cover.url, cover.image_id, first_release_date, parent_game, category{(gameYearUnix > 0 ? $"; where first_release_date >= {gameYearUnix} & first_release_date < {gameYearUnix + OneYearUnix}" : "")}; search \"{gameName}\"; offset {offset}; limit {PageSize};";
            var baseUrl = "https://api.igdb.com/v4/games";

            var postRequest = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, baseUrl);
            postRequest.Headers.Add("Authorization", "Bearer " + this.AccessToken);
            postRequest.Headers.Add("Client-ID", YOUR_CLIENT_ID);
            postRequest.Content = new StringContent(rawData);

            var response = await client.SendAsync(postRequest);

            if (response.StatusCode == System.Net.HttpStatusCode.OK) 
            {
                var content = await response.Content.ReadAsStringAsync();
                var loginApiReturn = JsonSerializer.Deserialize<List<GetGameApiReturn>>(content);
                var returnedGames = loginApiReturn
                    .OrderBy(x => x.FirstReleaseDate)
                    .OrderBy(x => x.FirstReleaseDate == 0)
                    .ToList();
                CalculateLastPage(loginApiReturn.Count);

                var gamesAlreadyInDb = await _gameService.GetMostPickedGamesFromList(_navigationManager.Uri, returnedGames.Select(x => x.Id).ToList());
                var returnedGamesOrdered = returnedGames
                    .OrderBy(x => !gamesAlreadyInDb.Contains(x.Id))
                    .ToList();

                if (Page == 0 || IsMobile)
                    this.Games = returnedGamesOrdered;
                else
                    this.Games.AddRange(returnedGamesOrdered);

                foreach (var game in this.Games)
                {
                    DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(game.FirstReleaseDate);
                    DateTime dateTime = dateTimeOffset.UtcDateTime;
                    game.FirstReleaseDateText = game.FirstReleaseDate != 0 ? $"- {dateTime.Year.ToString()}" : "";
                    if (!string.IsNullOrEmpty(game.Cover.ImageId))
                        game.Cover.Url = $"https://images.igdb.com/igdb/image/upload/t_cover_big/{game.Cover.ImageId}.jpg";
                    else
                        game.Cover.Url = "";
                }
            }
        }
        catch(Exception e)
        {
            Console.WriteLine($"[ERRO] - GetGameByName - {e.Message}", e);
        }
    }

    private async Task SelectGame(string gameInfo)
    {
        try
        {
            if (gameInfo == "next")
            {
                this.Games = new List<GetGameApiReturn>();
                await LoadNextPage();
            }
            else
            {
                var gameInfoItems = gameInfo.Split('§');
                await SelectGame(new GetGameApiReturn()
                {
                    Id = int.Parse(gameInfoItems[0]),
                    Name = gameInfoItems[1],
                    FirstReleaseDate = long.Parse(gameInfoItems[2]),
                    FirstReleaseDateText = gameInfoItems[4],
                    Cover = new Cover()
                    {
                        ImageId = gameInfoItems[3]
                    }
                });
            }
        }
        catch(Exception e)
        {
            Console.WriteLine($"[ERRO] - SelectGame - {e.Message}", e);
        }
    }

    private async Task SelectGame(GetGameApiReturn game)
    {
        this.SelectedGame = game;
        ResetVariables();
        this.SelectedGameInternalId = _gameService.Create(this.SelectedGame);

        await OnGameSelectEvent.InvokeAsync((this.SelectedGame.Name, game.FirstReleaseDateText, this.SelectedGameInternalId));
    }

    private long ConvertYearToUnixTime(string gameYear)
    {
        try
        {
            var dateTimeGameYear = new DateTime(int.Parse(gameYear),1,1);
            var dateTimeOffsetGameYear = new DateTimeOffset(dateTimeGameYear);
            return dateTimeOffsetGameYear.ToUnixTimeSeconds();
        }
        catch(Exception e)
        {
            Console.WriteLine($"[ERRO] - ConvertYearToUnixTime - {e.Message}", e);
            return 0;
        }
    }

    private void CalculateLastPage(int items)
    {
        if (!OnRegularLastPage)
        {
            OnRegularLastPage = items < PageSize;
            OnExtrasLastPage = OnRegularLastPage && Page == 0;
        }
        else if (!OnExtrasLastPage)
            OnExtrasLastPage = items < PageSize;
        
        OnLastPage = OnRegularLastPage && OnExtrasLastPage;
    }

    private void ResetVariables()
    {
        this.SearchedGame = "";
        this.Page = 0;
        this.ExtrasPage = -1;
        this.OnLastPage = false;
        this.OnRegularLastPage = false;
        this.OnExtrasLastPage = false;
        this.ScrolledToBottom = false;
        this.Searching = false;
        this.Games = new List<GetGameApiReturn>();
    }
}