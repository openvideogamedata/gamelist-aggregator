@using community.Data
@using community.Utils
@inject GameListRequestService _gameListRequestService
@inject ItemService _itemService
@inject IHttpContextAccessor _httpContextAccessor
@inject UserService _userService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Contributions> Loc

<PageTitle>Open Video Game Data - @Loc["ContributionsTitle"]</PageTitle>
<HeadContent>
    <meta name="description" content="@Loc["ContributionsSubtitle"]">
</HeadContent>

@if (gameListRequests == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (_userService.IsLogged()) {
        <nav>
            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <button class="nav-link @(myRequestsOnly ? "" : "active")" type="button" @onclick="() => ToggleFilter()">@Loc["All"]</button>
                <button class="nav-link @(myRequestsOnly ? "active" : "")" type="button" @onclick="() => ToggleFilter()">@Loc["MyLists"]</button>
            </div>
        </nav>
    }

    @foreach (var itemRequest in gameListRequests.Where(x => !x.Hidden).ToList()) 
    {
        <hr style="margin-bottom: 10px; margin-top: 25px; position: relative; z-index: -999;"/>

        <div class="row">
            <div class="col-4">
                @if (itemRequest.Updating) {
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                } else {
                    <button class="btn btn-primary btn-sm" @onclick="() => GiveLike(itemRequest)">
                        @itemRequest.UsersLiked.Count <i class="oi oi-thumb-up" aria-hidden="true"></i>
                    </button>
                    <button class="btn btn-danger btn-sm" @onclick="() => GiveDislike(itemRequest)">
                        @itemRequest.UsersDisliked.Count <i class="oi oi-thumb-down" aria-hidden="true"></i>
                    </button> 
                }
            </div>
            <div class="col-8">
                @if (Slug == null) {
                    <b><a style="color: #EEEEEE; cursor: pointer; text-decoration-line: none;" href="/list/@itemRequest.FinalGameList.Slug">@itemRequest.FinalGameList.Title @itemRequest.FinalGameList.Year</a></b>
                }
            </div>
        </div>

        <div class="row">
            <div class="col">
                @foreach (var gameRequest in itemRequest.GameRequests.OrderBy(item => item.Position))
                {
                    <span class="citation-item"><b>@($"{@gameRequest.Position}.")</b> @gameRequest.GameTitle</span>
                }
            </div>
        </div>

        <div class="row">
            <div class="col-6">
                <p><b>@Loc["Source"]:</b> <a href="@itemRequest.SourceListUrl" target="_blank">@itemRequest.SourceName</a></p>
            </div>
            <div class="col-6">
                <p>
                    <b>@Loc["Creator"]:</b> <a style="margin-left: 0px !important" href="/users/@itemRequest.UserPosted.Nickname">@itemRequest.UserPosted.FullName</a>
                </p>
            </div>
        </div>

        @if (myRequestsOnly)
        {
            <td>
                <button class="btn btn-danger" @onclick="() => DeleteItem(itemRequest)">Delete</button>
            </td>
        }
        else
        {
            <CascadingAuthenticationState>
                <AuthorizeView Roles="admin">
                    <Authorized>
                        <td>
                            <button class="btn btn-primary" @onclick="async () => await Approve(itemRequest)">Approve</button>
                            <button class="btn btn-danger" @onclick="async () => await Reject(itemRequest)">Reject</button>
                        </td>
                    </Authorized>
                </AuthorizeView>
            </CascadingAuthenticationState>
        }
    }

    <Paginator pager="@pager" OnPageClickEvent="@((args)=> OnPageClick(args.Item1,args.Item2))"/>
}

@code {

    [Parameter]
    public string Slug { get; set; } = null;

    private List<GameListRequest>? gameListRequests;
    private Pager pager;
    private string UserNameId;
    private bool myRequestsOnly;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        try
        {
            UserNameId = _userService.GetLoggedUserNameIdentifier();
        }
        catch { }
    }

    private void ToggleFilter() {
        myRequestsOnly = !myRequestsOnly;
        (gameListRequests, pager) = _gameListRequestService.GetAllPaged(myRequestsOnly, UserNameId, slug: Slug);
    }
    
    protected override void OnParametersSet()
    {
        (gameListRequests, pager) = _gameListRequestService.GetAllPaged(slug: Slug);
    }

    private async Task OnPageClick(int page, int pageSize)
    {
        (gameListRequests, pager) = _gameListRequestService.GetAllPaged(myRequestsOnly, UserNameId, page, pageSize, slug: Slug);
    }

    private async Task GiveLike(GameListRequest gameListRequest)
    {
        RedirectToLoginIfNotLogged();

        gameListRequest.Updating = true;
        await _gameListRequestService.GiveLike(gameListRequest.Id, UserNameId);
        await UpdateItemOnList(gameListRequest.Id);
    }

    private async Task GiveDislike(GameListRequest gameListRequest)
    {
        RedirectToLoginIfNotLogged();

        gameListRequest.Updating = true;
        await _gameListRequestService.GiveDislike(gameListRequest.Id, UserNameId);
        await UpdateItemOnList(gameListRequest.Id);
    }

    private async Task UpdateItemOnList(long itemRequestId)
    {
        var itemRef = this.gameListRequests.Single(x => x.Id == itemRequestId);
        var updatedItem = await _gameListRequestService.GetItem(itemRequestId);
        itemRef.UsersLiked = updatedItem.UsersLiked;
        itemRef.UsersDisliked = updatedItem.UsersDisliked;
        itemRef.Score = updatedItem.Score;
        itemRef.Hidden = updatedItem.Hidden;
        itemRef.Updating = false;
    }

    private async Task Approve(GameListRequest gameListRequest)
    {
        var response = await _itemService.ApproveGameList(gameListRequest);

        if (response.Success) {
            await _gameListRequestService.UpdateVisibility(gameListRequest.Id, false);
            var message = $"Your submission for the list '{gameListRequest.FinalGameList.GetFullName()}' has been approved!";
            await _userService.SendNotification(message, gameListRequest.UserPostedId);
            await UpdateItemOnList(gameListRequest.Id);
        }
    }

    private async Task DeleteItem(GameListRequest gameListRequest)
    {
        await _gameListRequestService.Delete(gameListRequest, UserNameId);
        (gameListRequests, pager) = _gameListRequestService.GetAllPaged(myRequestsOnly, UserNameId, slug: Slug);
    }

    private async Task Reject(GameListRequest gameListRequest)
    {
        await _gameListRequestService.UpdateVisibility(gameListRequest.Id, false);
        var message = $"Your submission for the list '{gameListRequest.FinalGameList.Title}' has been rejected :(";
        await _userService.SendNotification(message, gameListRequest.UserPostedId);
        await UpdateItemOnList(gameListRequest.Id);
    }

    private void RedirectToLoginIfNotLogged()
    {
        if (!_userService.IsLogged())
            NavigationManager.NavigateTo($"/Identity/Login?returnUrl={NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}", true);
    }
}