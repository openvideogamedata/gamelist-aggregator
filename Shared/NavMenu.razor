@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@inject UserService _userService
@inject IStringLocalizer<NavMenu> Loc

<CascadingAuthenticationState>
    <div style="padding: 0px !important;" class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <a style="width: 10vw;" class="navbar-brand" href=""><b>OVGD</b></a>
            <div class="nav-search-home">
                <InputText class="form-control" @bind-Value="searchedText" @onblur="Search" @onkeydown="@PressedKey"/>
            </div>
            <div style="width: 10vw; display: flex; justify-content: flex-end">
                @if (!isLogged)
                {
                    <a style="margin-top: 8px; margin: 8px 8px 0 0;" class="nav-sign-up"
                    href="/Identity/Login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)"
                    target="_top">SignUp</a>
                }
                <button style="display: inline-block;" title="menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                    <span class="navbar-toggler-icon"></span>
                </button>
            </div>
        </div>
    </div>

    <div class="@NavMenuCssClass nav-scrollable menu-gambiarrado-mas-bonito"
    style="display: @(NavMenuCssClass != null ? "none" : "flex");"
    @onclick="ToggleNavMenu">
        <nav class="flex-column" style="width: 350px; background-image: linear-gradient(180deg, #000000 0%, #202020 95%);">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> @Loc["Home"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="list-suggestions">
                    <span class="oi oi-justify-left" aria-hidden="true"></span> @Loc["ListSuggestions"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="games-database">
                    <span class="oi oi-puzzle-piece" aria-hidden="true"></span> @Loc["GamesDatabase"]
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="video-game-history">
                    <span class="oi oi-book" aria-hidden="true"></span> @Loc["GamesHistory"]
                </NavLink>
            </div>
            @if (isLogged && !string.IsNullOrEmpty(GetMyListsLink())) {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="@GetMyListsLink()">
                        <span class="oi oi-justify-left" aria-hidden="true"></span> @Loc["MyLists"]
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="users">
                        <span class="oi oi-people" aria-hidden="true"></span> @Loc["Users"]
                    </NavLink>
                </div>
            }
            <AuthorizeView Roles="admin">
                <Authorized>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="admin/users">
                            <span class="oi oi-people" aria-hidden="true"></span> Users (admin)
                        </NavLink>
                    </div>
                </Authorized>
            </AuthorizeView>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="about">
                    <span class="oi oi-info" aria-hidden="true"></span> @Loc["About"]
                </NavLink>
            </div>

            @if (!isLogged)
            {
                <div class="nav-item login-item px-3" style="padding-top: 1.5rem;">
                    <NavLink class="nav-link" href="@GetLoginWithRedirectUrl()">
                        <span class="oi oi-account-login" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            }
            else
            {
                <div class="nav-item login-item px-3" style="padding-top: 1.5rem;">
                    <NavLink class="nav-link" href="@userPageUrl">
                        <span class="oi oi-person" aria-hidden="true"></span> @Loc["You"] 
                        @if(hasNotifications)
                        {
                            <span style="color: red;" class="oi oi-media-record" aria-hidden="true"></span>
                        }
                    </NavLink>
                </div>
                <div class="nav-item login-item px-3">
                    <NavLink class="nav-link" href="/Identity/Logout">
                        <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
                    </NavLink>
                </div>
            }

        </nav>
    </div>
</CascadingAuthenticationState>
<style>
    .menu-gambiarrado-mas-bonito {
        width: 100%;
        position: absolute;
        background: #12121200;
        justify-content: flex-end;
        z-index: 5;
    }
</style>

@code {
    private bool collapseNavMenu = true;
    private bool hasNotifications = false;
    private bool isLogged = true;
    private string userPageUrl = "";
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private User? userLogged = null;
    private string searchedText = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        isLogged = _userService.IsLogged();
        if (isLogged)
        {
            userLogged = _userService.GetLoggedUserWithNotifications();
            this.userPageUrl = string.IsNullOrEmpty(userLogged?.Nickname) ? "/" : $"/users/{userLogged.Nickname}";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           await ProtectedSessionStore.SetAsync("hasNotifications", userLogged?.Notifications?.Any(x => !x.Read));
        }
        else
        {
            try
            {
                var storedValue = await ProtectedSessionStore.GetAsync<bool>("hasNotifications");
                var hasNotificationsStored = storedValue.Success ? storedValue.Value : false;          
                if (hasNotificationsStored != hasNotifications)
                {
                    hasNotifications = hasNotificationsStored;
                    StateHasChanged();
                }
            }
            catch(Exception) { }
        }
    }

    private string GetMyListsLink() {
        if (userLogged != null)
            return $"users/{userLogged.Nickname}/lists";
        return "";
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private string GetLoginWithRedirectUrl()
    {
        return $"/Identity/Login?returnUrl={NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}";
    }

    private void Search()
    {
        GoToSearchPage();
    }

    private void PressedKey(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            GoToSearchPage();
    }

    private void GoToSearchPage()
    {
        if (!string.IsNullOrEmpty(searchedText))
        {
            var search = searchedText.ToString();
            searchedText = "";
            NavigationManager.NavigateTo($"/search/{search}", false);
        }
    }
}
