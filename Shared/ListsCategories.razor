@using community.Data
@using community.Utils
@inject GameListService _gameListService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<ListsCategories> Loc

@if (searching)
{
    <div class="spinner-border" role="status"></div>
}
else if (listsCategories != null)
{
    @if (listsCategories.Any())
    {
        <div class="mt-3">
            @foreach (var item in listsCategories)
            {
                <div class="pinned-list">
                    <div class="cursor-pointer" @onclick="() => ViewList(item.Slug)">
                        @foreach (var gameWinner in @item.TopThreeWinners)
                        {
                            <GameCover src="@gameWinner.CoverImageUrl" alt="@gameWinner.GameTitle" height="112" width="83" />
                        }
                    </div>
                    <a class="pinned-list-title" href="/list/@item.Slug"><b>@item.Title @item.Year</b></a>
                    <p class="pinned-list-info">@Loc["Basedon"] <b>@item.NumberOfSources</b> @Loc["List"]@(item.NumberOfSources > 1 ? "s" : "") - @item.NumberOfGames @Loc["Game"]s</p>
                </div>
            }
        </div>

        <Paginator pager="@pager" OnPageClickEvent="@(async (args)=> await GetAllLists(args.Item1))"/>
    }
}


@code {

    [Parameter]
    public FilterListsCategory Filters { get; set; } = null;
    [Parameter]
    public EventCallback<FilterListsCategory> FiltersChanged { get; set; }

    private List<FinalGameList>? listsCategories = new List<FinalGameList>();
    private Pager pager;
    private bool searching = false;

    protected override async Task OnParametersSetAsync()
    {
        if (Filters != null)
            await GetAllLists();
        else
            listsCategories = new List<FinalGameList>();
    }

    private async Task GetAllLists(int page = 1)
    {
        searching = true;
        Filters.Page = page;
        (listsCategories, pager) = _gameListService.GetAllListsCategories(Filters, userId: 0);
        await FiltersChanged.InvokeAsync(Filters);
        searching = false;
    }

    private void ViewList(string slug)
    {
        NavigationManager.NavigateTo($"/list/{slug}");
    }
}

